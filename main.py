# --- –ó–∞–≥—Ä—É–∑–∫–∞ .env –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ ---
import hmac
import hashlib
import json
from dotenv import load_dotenv
load_dotenv()

import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# --- –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ ---
from core.payments import create_yookassa_payment
from database import create_db_and_tables, add_user, check_subscription, give_subscription_to_user
from core.validators import validate_photo
# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π bot, –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ --- #
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --- #
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [int(admin_id) for admin_id in os.getenv("ADMIN_IDS", "").split(',') if admin_id]
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤–µ–±—Ö—É–∫–æ–≤
WEB_SERVER_HOST = os.getenv("WEB_SERVER_HOST", "0.0.0.0")
WEB_SERVER_PORT = int(os.getenv("WEB_SERVER_PORT", 8080))
BASE_WEBHOOK_URL = os.getenv("BASE_WEBHOOK_URL") # –ù–∞–ø—Ä–∏–º–µ—Ä, https://your-app-name.railway.app

# –ü—É—Ç–∏ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
TELEGRAM_WEBHOOK_PATH = f'/webhook/{BOT_TOKEN}' # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å
YOOKASSA_WEBHOOK_PATH = os.getenv("YOOKASSA_WEBHOOK_PATH", "/yookassa/webhook")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è --- #
if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")

dp = Dispatcher()
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM --- #
class Form(StatesGroup):
    waiting_for_front_photo = State()
    waiting_for_profile_photo = State()
    chatting_with_ai = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --- #
def get_main_keyboard(is_admin_user: bool):
    buttons = [
        [InlineKeyboardButton(text="üì∏ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="start_analysis")],
        [InlineKeyboardButton(text="‚≠êÔ∏è –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")],
    ]
    if is_admin_user:
        buttons.append([InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_payment_keyboard(payment_url: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)]
    ])

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ --- #
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –†–∞–∑–¥–µ–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    await state.clear()
    user_id = message.from_user.id
    logging.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª /start")
    await add_user(user_id) # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç

    if is_admin(user_id):
        await message.answer(
            "<b>üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–ª–Ω—ã–π –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=get_main_keyboard(True)
        )
    else:
        welcome_text = (
            "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HD | Lookism!</b>\n\n"
            "–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏. "
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä "
            "–≤–∞—à–∏—Ö –∞–Ω—Ç—Ä–æ–ø–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∏–º–º–µ—Ç—Ä–∏–∏ –ª–∏—Ü–∞.\n\n"
            "‚≠êÔ∏è <b>–î–ª—è –Ω–∞—á–∞–ª–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</b>"
        )
        await message.answer(welcome_text, reply_markup=get_main_keyboard(False))

@dp.callback_query(F.data == "subscribe")
async def process_payment_start(cq: CallbackQuery):
    """–°–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É."""
    user_id = cq.from_user.id
    logging.info(f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –æ–ø–ª–∞—Ç—É.")

    amount = "100.00"
    description = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ HD | Lookism (1 –º–µ—Å—è—Ü)"

    payment_url, _ = await create_yookassa_payment(amount, description, {'user_id': user_id})

    if payment_url:
        await cq.message.answer(
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.",
            reply_markup=get_payment_keyboard(payment_url)
        )
    else:
        await cq.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await cq.answer()

@dp.callback_query(F.data == "start_analysis")
async def cmd_analyze(cq: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = cq.from_user.id
    is_user_admin = is_admin(user_id)
    has_sub = await check_subscription(user_id)

    if not is_user_admin and not has_sub:
        await cq.message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø–æ–ø—ã—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=get_main_keyboard(False)
        )
        await cq.answer()
        return

    await state.set_state(Form.waiting_for_front_photo)
    await cq.message.answer(
        "<b>–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑.</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à–µ —Ñ–æ—Ç–æ <b>–∞–Ω—Ñ–∞—Å</b> (–ª–∏—Ü–æ–º –∫ –∫–∞–º–µ—Ä–µ)."
    )
    await cq.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ---
@dp.message(Form.waiting_for_front_photo, F.photo)
async def handle_front_photo(message: Message, state: FSMContext):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –í–ê–õ–ò–î–ò–†–£–ï–¢ —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å."""
    await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å...")
    is_valid, error_message = await validate_photo(message.photo[-1])

    if not is_valid:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
        return

    await state.update_data(front_photo_file_id=message.photo[-1].file_id)
    await state.set_state(Form.waiting_for_profile_photo)
    await message.answer(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –≤ <b>–ø—Ä–æ—Ñ–∏–ª—å</b> (–±–æ–∫–æ–º)."
    )

@dp.message(Form.waiting_for_profile_photo, F.photo)
async def handle_profile_photo(message: Message, state: FSMContext):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç, –í–ê–õ–ò–î–ò–†–£–ï–¢ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑."""
    await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è...")
    is_valid, error_message = await validate_photo(message.photo[-1], is_profile=True)

    if not is_valid:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è.")
        return

    await state.update_data(profile_photo_file_id=message.photo[-1].file_id)
    await message.answer(
        "‚úÖ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–∏–Ω—è—Ç—ã! –ù–∞—á–∏–Ω–∞—é –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑. "
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç... –Ø –ø—Ä–∏—à–ª—é –æ—Ç—á–µ—Ç, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤."
    )
    asyncio.create_task(run_analysis(message, state))

async def run_analysis(message: Message, state: FSMContext):
    """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞: Face++, —Ä–∞—Å—á—ë—Ç –º–µ—Ç—Ä–∏–∫, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ DeepSeek."""
    from analyzers.lookism_metrics import compute_all
    from core.report_logic import create_report_prompt
    from core.integrations.deepseek import get_ai_answer

    user_id = message.from_user.id
    user_data = await state.get_data()
    front_photo_id = user_data.get('front_photo_file_id')
    profile_photo_id = user_data.get('profile_photo_file_id')

    try:
        metrics = await compute_all(bot, front_photo_id, profile_photo_id)
        report_prompt = create_report_prompt(metrics)
        
        await message.answer("üß† –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        ai_report = await get_ai_answer(report_prompt)

        await message.answer("<b>üéâ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!</b>")
        for i in range(0, len(ai_report), 4096):
            await message.answer(ai_report[i:i + 4096])

        await state.update_data(last_report=ai_report)
        await state.set_state(Form.chatting_with_ai)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ—Ç—á–µ—Ç—É.")

        if not is_admin(user_id):
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏ –∏–∑ –ë–î
            pass

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è user {user_id}: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        await state.clear()

# --- –ß–∞—Ç —Å –ò–ò ---
@dp.message(Form.chatting_with_ai, F.text)
async def chat_with_ai_handler(message: Message, state: FSMContext):
    from core.integrations.deepseek import get_ai_answer
    user_data = await state.get_data()
    report_context = user_data.get('last_report')

    wait_message = await message.answer("üí¨ –î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...")
    ai_response = await get_ai_answer(message.text, context=report_context)
    await wait_message.edit_text(ai_response)

# --- –í–µ–±—Ö—É–∫–∏ --- #
async def yookassa_webhook_handler(request: web.Request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏ –æ—Ç –ÆKassa."""
    bot_instance = request.app["bot"]
    try:
        body = await request.read()
        event_json = json.loads(body)
    except json.JSONDecodeError:
        logging.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç –ÆKassa.")
        return web.Response(status=400, text="Invalid JSON")

    if YOOKASSA_SECRET_KEY:
        try:
            signature_header = request.headers.get("Webhook-Signature")
            if not signature_header:
                return web.Response(status=400, text="Missing signature")
            
            parts = signature_header.split('=')
            if len(parts) != 2 or parts[0] != 'v1':
                 return web.Response(status=400, text="Invalid signature format")

            computed_signature = hmac.new(YOOKASSA_SECRET_KEY.encode(), body, hashlib.sha256).hexdigest()
            if not hmac.compare_digest(computed_signature, parts[1]):
                logging.warning("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞ –ÆKassa.")
                return web.Response(status=400, text="Invalid signature")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∏ –ÆKassa: {e}")
            return web.Response(status=500)

    logging.info(f"üîî –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç –ÆKassa: {event_json.get('event')}")

    if event_json.get("event") == "payment.succeeded":
        payment_object = event_json.get("object", {})
        metadata = payment_object.get("metadata", {})
        user_id = metadata.get("user_id")

        if user_id:
            await give_subscription_to_user(int(user_id))
            await bot_instance.send_message(user_id, "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
        else:
            logging.warning("–í –≤–µ–±—Ö—É–∫–µ –ÆKassa –Ω–µ –Ω–∞–π–¥–µ–Ω user_id.")

    return web.Response(status=200)

async def on_startup(app: web.Application):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    bot_instance = app["bot"]
    webhook_url = f"{BASE_WEBHOOK_URL}{TELEGRAM_WEBHOOK_PATH}"
    await bot_instance.set_webhook(webhook_url, drop_pending_updates=True)
    logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–µ–±—Ö—É–∫ –Ω–∞: {webhook_url}")

async def on_shutdown(app: web.Application):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    bot_instance = app["bot"]
    await bot_instance.delete_webhook()
    logging.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ --- #
async def main():
    await create_db_and_tables() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î

    if not BASE_WEBHOOK_URL:
        # –†–µ–∂–∏–º –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        logging.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ (polling)...")
        await bot.delete_webhook(drop_pending_updates=True) # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ
        await dp.start_polling(bot)
    else:
        # –†–µ–∂–∏–º –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        logging.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞...")
        app = web.Application()
        app["bot"] = bot

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
        app.router.add_post(YOOKASSA_WEBHOOK_PATH, yookassa_webhook_handler)
        telegram_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
        telegram_handler.register(app, path=TELEGRAM_WEBHOOK_PATH)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ startup/shutdown
        app.on_startup.append(on_startup)
        app.on_shutdown.append(on_shutdown)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        setup_application(app, dp, bot=bot)
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, WEB_SERVER_HOST, WEB_SERVER_PORT)
        await site.start()
        logging.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{WEB_SERVER_HOST}:{WEB_SERVER_PORT}")
        await asyncio.Event().wait() # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
