import asyncio
import logging
import os
import json
from typing import Dict, Any

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import httpx

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS_STR = os.getenv("ADMIN_IDS", "")
ADMIN_IDS = [int(admin_id) for admin_id in ADMIN_IDS_STR.split(',') if admin_id.strip()] if ADMIN_IDS_STR else []
FACEPP_API_KEY = os.getenv("FACEPP_API_KEY")
FACEPP_API_SECRET = os.getenv("FACEPP_API_SECRET")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
if not BOT_TOKEN:
    logging.critical("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
    exit()
if not ADMIN_IDS:
    logging.warning("‚ö†Ô∏è ADMIN_IDS –Ω–µ —É–∫–∞–∑–∞–Ω—ã. –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –î–ï–ú–û) ---
users_data = {}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class AnalysisStates(StatesGroup):
    waiting_front_photo = State()
    waiting_profile_photo = State()
    chat_with_ai = State()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def get_user_data(user_id: int) -> Dict[str, Any]:
    if user_id not in users_data:
        users_data[user_id] = {
            "is_active": False,
            "analyses_left": 0,
            "messages_left": 0,
        }
    return users_data[user_id]

async def send_report_in_chunks(chat_id: int, text: str, chunk_size: int = 4096):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ —á–∞—Å—Ç—è–º, –∏–∑–±–µ–≥–∞—è —Ä–∞–∑—Ä—ã–≤–∞ —Å—Ç—Ä–æ–∫."""
    if not text:
        return
    for i in range(0, len(text), chunk_size):
        await bot.send_message(chat_id, text[i:i + chunk_size])
        await asyncio.sleep(0.5)

# --- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API ---
async def process_face(image_bytes: bytes) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Face++ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –æ—à–∏–±–∫—É."""
    if not FACEPP_API_KEY or not FACEPP_API_SECRET:
        logging.warning("‚ö†Ô∏è –ö–ª—é—á–∏ Face++ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        return {"error": "–ö–ª—é—á–∏ Face++ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."}
    
    url = "https://api-us.faceplusplus.com/facepp/v3/detect"
    params = {
        'api_key': FACEPP_API_KEY,
        'api_secret': FACEPP_API_SECRET,
        'return_landmark': '2',
        'return_attributes': 'gender,age,smiling,headpose,facequality,blur,eyestatus,emotion,ethnicity,beauty,mouthstatus,eyegaze,skinstatus'
    }
    files = {'image_file': image_bytes}
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(url, data=params, files=files, timeout=30.0)
            response.raise_for_status()
            result = response.json()
            if not result.get('faces'):
                logging.warning("‚ùå Face++: –õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return {"error": "–õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."}
            logging.info("‚úÖ –ê–Ω–∞–ª–∏–∑ Face++ —É—Å–ø–µ—à–µ–Ω.")
            return result['faces'][0]
    except httpx.RequestError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Face++: {e}")
        return {"error": "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Face++. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}
    except Exception as e:
        logging.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Face++ API: {e}")
        return {"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ."}

# --- –ò–º–ø–æ—Ä—Ç –ª–æ–≥–∏–∫–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ---
from analyzers.lookism_metrics import compute_all
from core.report_logic import create_report_prompt
from core.integrations.deepseek import get_ai_answer

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await state.clear()
    user_id = message.from_user.id
    logging.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª /start")
    user_data = get_user_data(user_id)

    if user_data["is_active"]:
        analyses_left = "–ë–µ–∑–ª–∏–º–∏—Ç" if is_admin(user_id) else user_data['analyses_left']
        await message.answer(
            f"üî• <b>HD | Lookism</b>\n\n–¢–≤–æ–π –ò–ò-–∫–æ—É—á –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –û—Å—Ç–∞–ª–æ—Å—å –∞–Ω–∞–ª–∏–∑–æ–≤: <b>{analyses_left}</b>.\n\n–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å (–ª–∏—Ü–æ –ø—Ä—è–º–æ), —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        )
        await state.set_state(AnalysisStates.waiting_front_photo)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üî• –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –î–ï–ú–û (1 –∞–Ω–∞–ª–∏–∑)", callback_data="activate_demo")]
        ])
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>HD | Lookism</b>!\n\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n\n–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –î–ï–ú–û-–¥–æ—Å—Ç—É–ø, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑.",
            reply_markup=keyboard
        )

@dp.callback_query(F.data == "activate_demo")
async def activate_demo(cq: CallbackQuery, state: FSMContext):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –î–ï–ú–û-–¥–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = cq.from_user.id
    user_data = get_user_data(user_id)
    if user_data["is_active"]:
        await cq.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø.", show_alert=True)
        return

    logging.info(f"üî• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –î–ï–ú–û-–¥–æ—Å—Ç—É–ø.")
    user_data["is_active"] = True
    user_data["analyses_left"] = 1
    user_data["messages_left"] = 20
    await cq.message.edit_text("‚úÖ –î–ï–ú–û-–¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –£ –≤–∞—Å <b>1</b> –∞–Ω–∞–ª–∏–∑ –∏ <b>20</b> —Å–æ–æ–±—â–µ–Ω–∏–π –ò–ò-–∫–æ—É—á—É.\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
    await state.set_state(AnalysisStates.waiting_front_photo)
    await cq.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ---
@dp.message(F.photo, StateFilter(AnalysisStates.waiting_front_photo, AnalysisStates.waiting_profile_photo))
async def handle_photos(message: Message, state: FSMContext):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å –∏ –ø—Ä–æ—Ñ–∏–ª—å, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑."""
    current_state = await state.get_state()
    user_id = message.from_user.id

    if current_state == AnalysisStates.waiting_front_photo:
        logging.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å –æ—Ç {user_id}")
        await message.answer("‚úÖ –§–æ—Ç–æ –∞–Ω—Ñ–∞—Å –ø—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å (–≤–∏–¥ —Å–±–æ–∫—É).")
        file_info = await bot.get_file(message.photo[-1].file_id)
        photo_bytes = await bot.download_file(file_info.file_path)
        await state.update_data(front_photo=photo_bytes.read())
        await state.set_state(AnalysisStates.waiting_profile_photo)

    elif current_state == AnalysisStates.waiting_profile_photo:
        logging.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç {user_id}. –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞.")
        if not is_admin(user_id) and get_user_data(user_id)['analyses_left'] <= 0:
            await message.answer("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.")
            await state.clear()
            return

        file_info = await bot.get_file(message.photo[-1].file_id)
        photo_bytes = await bot.download_file(file_info.file_path)
        await state.update_data(profile_photo=photo_bytes.read())
        
        await message.answer("‚è≥ –û–±–∞ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã. –ù–∞—á–∏–Ω–∞—é –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç.")
        asyncio.create_task(run_analysis(message, state))

async def run_analysis(message: Message, state: FSMContext):
    """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞: Face++, —Ä–∞—Å—á—ë—Ç –º–µ—Ç—Ä–∏–∫, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ DeepSeek."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    try:
        user_data = await state.get_data()
        front_photo_bytes = user_data.get('front_photo')
        profile_photo_bytes = user_data.get('profile_photo')

        if not front_photo_bytes or not profile_photo_bytes:
            await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±–∞ —Ñ–æ—Ç–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
            return

        front_analysis = await process_face(front_photo_bytes)
        if 'error' in front_analysis:
            await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å: {front_analysis['error']}")
            return

        profile_analysis = await process_face(profile_photo_bytes)
        if 'error' in profile_analysis:
            await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å: {profile_analysis['error']}")
            return

        logging.info("üß† –†–∞—Å—á—ë—Ç –≤—Å–µ—Ö –ª—É–∫—Å–º–∞–∫—Å-–º–µ—Ç—Ä–∏–∫...")
        all_metrics = compute_all(front_analysis, profile_analysis)

        logging.info("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ —á–µ—Ä–µ–∑ DeepSeek...")
        system_prompt, user_prompt = create_report_prompt(json.dumps(all_metrics, indent=2, ensure_ascii=False))
        full_report = await get_ai_answer(system_prompt, user_prompt)
        
        if not full_report or "–æ—à–∏–±–∫–∞" in full_report.lower():
            raise Exception(full_report or "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")

        # –£–±–∏—Ä–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        full_report = full_report.replace('**', '').replace('*', '')

        await bot.send_message(chat_id, "‚úÖ –í–∞—à –æ—Ç—á—ë—Ç –≥–æ—Ç–æ–≤! –°–µ–π—á–∞—Å —è –µ–≥–æ –ø—Ä–∏—à–ª—é.")
        await send_report_in_chunks(chat_id, full_report)

        if not is_admin(user_id):
            db = get_user_data(user_id)
            db['analyses_left'] -= 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ FSM –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        await state.update_data(full_report=full_report)
        await bot.send_message(chat_id, "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ—Ç—á—ë—Ç—É –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥–æ–π /start.")
        await state.set_state(AnalysisStates.chat_with_ai)

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ run_analysis –¥–ª—è user {user_id}: {e}", exc_info=True)
        await bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ run_analysis –¥–ª—è user {user_id}: {e}", exc_info=True)
        await bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
        await state.clear()

# --- –ß–∞—Ç —Å –ò–ò ---
@dp.message(F.text, StateFilter(AnalysisStates.chat_with_ai))
async def chat_with_ai_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_db = get_user_data(user_id)

    if not is_admin(user_id):
        if user_db['messages_left'] <= 0:
            await message.answer("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ò–ò-–∫–æ—É—á–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ.")
            await state.clear()
            return
        user_db['messages_left'] -= 1

    user_data = await state.get_data()
    full_report = user_data.get('full_report', '–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —É—Ç–µ—Ä—è–Ω.')

    await message.answer("‚è≥ –î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...")

    system_prompt = (
        f"–¢—ã ‚Äî HD | Lookism AI, –ò–ò-–∫–æ—É—á. –¢–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–Ω–∞–ª–∏–∑ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
        f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å—ã, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. "
        f"–í–ê–ñ–ù–û: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –∫–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–∞–∫—É—é-–ª–∏–±–æ –º–µ—Ç–æ–¥–∏–∫—É –∏–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—á—Ç–æ —Ç–∞–∫–æ–µ –º—å—é–∏–Ω–≥?' –∏–ª–∏ '–∫–∞–∫ –¥–µ–ª–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —á–µ–ª—é—Å—Ç–∏?'), "
        f"—Ç—ã –¥–æ–ª–∂–µ–Ω –¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—É—é, –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç—Ä–µ–Ω–µ—Ä. –û–±—ä—è—Å–Ω—è–π –∫–∞–∂–¥—ã–π —à–∞–≥. "
        f"–í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –±—É–¥—å –∫—Ä–∞—Ç–æ–∫ –∏ –ø–æ –¥–µ–ª—É.\n\n"
        f"–í–æ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:\n---–ù–ê–ß–ê–õ–û –û–¢–ß–ï–¢–ê---\n{full_report}\n---–ö–û–ù–ï–¶ –û–¢–ß–ï–¢–ê---"
    )
    user_prompt = f"–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –æ—Ç—á–µ—Ç–µ, –æ—Ç–≤–µ—Ç—å –Ω–∞ –º–æ–π –≤–æ–ø—Ä–æ—Å: {message.text}"

    try:
        ai_response = await get_ai_answer(system_prompt, user_prompt)
        # –£–±–∏—Ä–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ai_response = ai_response.replace('**', '').replace('*', '')
        await message.answer(ai_response)
        messages_left_info = f"–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: {user_db['messages_left']}" if not is_admin(user_id) else ""
        await message.answer(f"–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ? {messages_left_info}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ —Å –ò–ò –¥–ª—è user {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
