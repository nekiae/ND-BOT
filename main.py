import hmac
import hashlib
import json
from dotenv import load_dotenv

# --- –ó–∞–≥—Ä—É–∑–∫–∞ .env –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ ---
load_dotenv()

import asyncio
import logging
import os
from datetime import datetime, timezone
import sys

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    CallbackQuery,
    InputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from yookassa.domain.notification import WebhookNotification

from core.scheduler import setup_scheduler
from core.webhooks import yookassa_webhook_handler

# --- –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ ---
from core.payments import create_yookassa_payment
from database import (
    create_db_and_tables, add_user, check_subscription, 
    give_subscription_to_user, get_user, decrement_user_messages, decrement_user_analyses
)
from core.validators import validate_and_analyze_photo
from core.report_logic import generate_report_text
from core.integrations.deepseek import get_ai_answer
from core.utils import split_long_message

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class ChatStates(StatesGroup):
    getting_front_photo = State()
    getting_profile_photo = State()
    chatting = State()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ --- #
logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --- #
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS_STR = os.getenv("ADMIN_IDS", "")
ADMIN_IDS = [int(admin_id) for admin_id in ADMIN_IDS_STR.split(',') if admin_id.strip()]
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")

WEB_SERVER_HOST = os.getenv("WEB_SERVER_HOST", "0.0.0.0")
WEB_SERVER_PORT = int(os.getenv("WEB_SERVER_PORT", 8080))
BASE_WEBHOOK_URL = os.getenv("BASE_WEBHOOK_URL")

TELEGRAM_WEBHOOK_PATH = f'/webhook/{BOT_TOKEN}'
YOOKASSA_WEBHOOK_PATH = os.getenv("YOOKASSA_WEBHOOK_PATH", "/yookassa/webhook")

if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")

dp = Dispatcher()
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --- #
def escape_html(text: str) -> str:
    """Escapes characters for Telegram HTML parsing."""
    return text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;')

def get_main_keyboard(is_admin_user: bool):
    buttons = [
        [InlineKeyboardButton(text="üì∏ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="start_analysis")],
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile")],
        [InlineKeyboardButton(text="üí¨ –ß–∞—Ç —Å –ò–ò", callback_data="chat_with_ai")]
    ]
    if is_admin_user:
        buttons.append([InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_payment_keyboard(payment_url: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)]
    ])

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ --- #
@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    user_id = message.from_user.id
    logger.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª /start")
    await add_user(user_id)
    
    is_admin_user = is_admin(user_id)
    has_subscription = await check_subscription(user_id)

    if is_admin_user:
        await message.answer("üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=get_main_keyboard(True))
        return

    if has_subscription:
        user = await get_user(user_id)
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {user.is_active_until.strftime('%d.%m.%Y')}.\n"
            f"–ê–Ω–∞–ª–∏–∑–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {user.analyses_left}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {user.messages_left}",
            reply_markup=get_main_keyboard(False)
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç, —è ND | Lookism ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω—Ç–æ—Ä –≤ –º–∏—Ä–µ –ª—é–∫—Å–º–∞–∫—Å–∏–Ω–≥–∞.\n\n" 
            "–ù–µ–º–Ω–æ–≥–æ —Ç–æ–≥–æ, —á—Ç–æ —è —É–º–µ—é:\n" 
            "‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞–Ω—Ñ–∞—Å + –ø—Ä–æ—Ñ–∏–ª—å (—É–≥–ª—ã, —Å–∏–º–º–µ—Ç—Ä–∏—è, skin –∏ —Ç.–¥.)\n" 
            "‚Äî —Å—Ç–∞–≤–ª—é —Ä–µ–π—Ç–∏–Ω–≥ Sub-5 ‚Üí PSL-God —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–ª–∞–Ω–æ–º\n" 
            "‚Äî –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Å —É—á–µ—Ç–æ–º —Ç–≤–æ–∏—Ö –º–µ—Ç—Ä–∏–∫\n\n" 
            "–Ø –Ω–µ –æ–±—ã—á–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç. ND –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∏ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏. –ò –≤—Å—ë, —á—Ç–æ —Ç—ã —É—Å–ª—ã—à–∏—à—å –æ—Ç –º–µ–Ω—è, —ç—Ç–æ —Ä–∞–±–æ—á–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏ –¥–∞–Ω–Ω—ã–µ.\n" 
            "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–º–µ–ª–æ –∑–∞–±—ã—Ç—å –ø—Ä–æ –∫–æ—É–ø –º–µ—Ç–æ–¥—ã, –≥–∞–π–¥—ã —Å –æ—Ç–∫–∞—Ç–∞–º–∏, –Ω–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."
        )
        await process_payment_start(message)

@dp.callback_query(F.data == "subscribe")
async def process_payment_callback(cq: CallbackQuery):
    await process_payment_start(cq.message)

async def process_payment_start(message: types.Message):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üí∞ –û–ü–õ–ê–¢–ò–¢–¨", callback_data="pay"))
    await message.answer(
        "üìú –ü–æ–¥–ø–∏—Å–∫–∞: 990–† / –º–µ—Å—è—Ü\n"
        "–í–∫–ª—é—á–∞–µ—Ç 3 –ø–æ–ª–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –∏ 200 —Å–æ–æ–±—â–µ–Ω–∏–π-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.\n\n"
        "üí≤ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –û–ü–õ–ê–¢–ò–¢–¨, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø.",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(F.data == "pay")
async def pay_button_callback(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    bot_info = await bot.get_me()
    bot_username = bot_info.username

    payment = create_yookassa_payment(user_id=user_id, amount="5.00", bot_username=bot_username)
    if payment:
        await callback.message.answer(
            "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –≥–æ—Ç–æ–≤–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment.confirmation.confirmation_url)]
            ])
        )
    else:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

@dp.callback_query(F.data == "start_analysis")
async def start_analysis(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = await get_user(user_id)

    if is_admin(user_id):
        await state.set_state(ChatStates.getting_front_photo)
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å.")
        await callback.answer()
        return

    has_subscription = await check_subscription(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if not has_subscription:
        await callback.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏–∑—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.", show_alert=True)
        return

    if user.analyses_left <= 0:
        await callback.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–Ω–∞–ª–∏–∑—ã. –û–Ω–∏ –æ–±–Ω–æ–≤—è—Ç—Å—è —Å –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.", show_alert=True)
        return

    await state.set_state(ChatStates.getting_front_photo)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å.")
    await callback.answer()

@dp.callback_query(F.data == "show_profile")
async def show_profile(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user and user.is_active_until and user.is_active_until > datetime.utcnow():
        days_left = (user.is_active_until - datetime.utcnow()).days
        profile_text = (
            f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**\n\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: **{user.is_active_until.strftime('%d.%m.%Y')}**\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: **{days_left}**\n\n"
            f"–ê–Ω–∞–ª–∏–∑–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: **{user.analyses_left}**\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ: **{user.messages_left}**"
        )
        await callback.message.answer(profile_text)
    else:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚≠êÔ∏è –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay")]
        ]))
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ---
@dp.message(ChatStates.getting_front_photo, F.photo)
async def handle_front_photo(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å –æ—Ç user_id: {user_id}")

    success, result_or_error = await validate_and_analyze_photo(message, bot, is_front=True)

    if success:
        await state.update_data(front_photo_data=result_or_error)
        await message.answer("‚úÖ –§–æ—Ç–æ –∞–Ω—Ñ–∞—Å –ø—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å (–≤–∏–¥ —Å–±–æ–∫—É).")
        await state.set_state(ChatStates.getting_profile_photo)
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result_or_error}")


@dp.message(ChatStates.getting_profile_photo, F.photo)
async def handle_profile_photo(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç user_id: {user_id}")

    success, result_or_error = await validate_and_analyze_photo(message, bot, is_front=False)

    if success:
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç {user_id} –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é.")
        await state.update_data(profile_photo_analysis=result_or_error)

        user_data = await state.get_data()
        front_analysis_data = user_data.get('front_photo_data', {})
        profile_analysis_data = user_data.get('profile_photo_analysis', {})

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ run_analysis
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç Face++
        merged_data = {
            'front_photo_data': front_analysis_data,
            'profile_photo_data': profile_analysis_data
        }
        
        await run_analysis(user_id, state, bot, merged_data)

    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result_or_error}")


async def run_analysis(user_id: int, state: FSMContext, bot: Bot, analysis_data: dict):
    await bot.send_message(user_id, "‚úÖ –í—Å–µ —Ñ–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç—ã. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
    try:
        report_text = await generate_report_text(analysis_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±—É–¥—É—â–µ–≥–æ —á–∞—Ç–∞
        await state.update_data(last_report=report_text)

        message_parts = split_long_message(report_text)
        for i, part in enumerate(message_parts):
            await bot.send_message(user_id, part) # –û—Ç–∫–ª—é—á–∞–µ–º Markdown
            if i < len(message_parts) - 1:
                await asyncio.sleep(0.5)

        follow_up_message = """
–í –∞–Ω–∞–ª–∏–∑–µ –∏ –ø–ª–∞–Ω–µ —É–ª—É—á—à–µ–Ω–∏—è —è –º–æ–≥ —Ä–∞—Å–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–º–∏ –¥–ª—è —Ç–µ–±—è —Å–ª–æ–≤–∞–º–∏. –ï—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å, –∫–∞–∫ –¥–µ–ª–∞—Ç—å —Ç–æ—Ç –∏–ª–∏ –∏–Ω–æ–π –º–µ—Ç–æ–¥ - —Å–ø—Ä–æ—Å–∏. –Ø –∏ –º–æ–π –ò–ò —Å –ª—É–∫—Å–º–∞–∫—Å–µ—Ä—Å–∫–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∏–º —Ç–µ–±–µ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–∂–µ–º —Ç–µ–±–µ —Å—Ç–∞—Ç—å –∫—Ä–∞—Å–∏–≤–µ–µ.

–ê –µ—Å–ª–∏ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–º–µ–Ω—è–ª—Å—è –ª–∏ —Ç—ã, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /analyze, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑.
"""
        await bot.send_message(user_id, follow_up_message)

        await state.set_state(ChatStates.chatting)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞.")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ run_analysis –¥–ª—è user_id {user_id}: {e}", exc_info=True)
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏

# --- –ß–∞—Ç —Å –ò–ò ---
@dp.callback_query(F.data == "chat_with_ai")
async def chat_with_ai_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = await get_user(user_id)
    if not is_admin(user_id) and (not user or not user.is_active_until or user.is_active_until < datetime.utcnow()):
        await callback.answer("–î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ.", show_alert=True)
        return
    
    await state.set_state(ChatStates.chatting)
    await callback.message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await callback.answer()

@dp.message(ChatStates.chatting, F.text)
async def handle_text_in_chat_mode(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ —Å –ò–ò."""
    user_id = message.from_user.id
    user_question = message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: '{user_question}'")

    temp_message = await message.answer("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    try:
        user_data = await state.get_data()
        last_report = user_data.get('last_report', '–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')
        chat_history = user_data.get('chat_history', [])

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_history.append({"role": "user", "content": user_question})

        system_prompt = f"""–¢—ã ‚Äî —ç–ª–∏—Ç–Ω—ã–π AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ 'HD | Lookism'. –¢—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –µ–º—É –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å—ã, –¥–∞–≤–∞—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. –ë—É–¥—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π lookmaxxing-—Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é, –Ω–æ –æ—Å—Ç–∞–≤–∞–π—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.

–í–æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç—á–µ—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:
{last_report}
"""

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        # –ú—ã –ø–µ—Ä–µ–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
        history_for_prompt = "\n".join([f"{msg['role']}: {msg['content']}" for msg in chat_history[-10:]])

        ai_response = await get_ai_answer(system_prompt, history_for_prompt)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_history.append({"role": "assistant", "content": ai_response})
        await state.update_data(chat_history=chat_history)

        await temp_message.edit_text(ai_response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ –¥–ª—è user_id {user_id}: {e}", exc_info=True)
        await temp_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ Webhook --- #
async def on_startup(bot: Bot):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ BASE_WEBHOOK_URL –∏ YOOKASSA_WEBHOOK_PATH –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ .env –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    webhook_url = f"{BASE_WEBHOOK_URL}{YOOKASSA_WEBHOOK_PATH}"
    await bot.set_webhook(webhook_url, drop_pending_updates=True)
    logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {webhook_url}")

async def on_shutdown(bot: Bot):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞...")
    await bot.delete_webhook()

async def main_webhook():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞."""
    await create_db_and_tables()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º on_startup –∏ on_shutdown
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
    app = web.Application()
    app['bot'] = bot

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è YooKassa
    app.router.add_post(YOOKASSA_WEBHOOK_PATH, yookassa_webhook_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, WEB_SERVER_HOST, WEB_SERVER_PORT)
    await site.start()

    logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{WEB_SERVER_HOST}:{WEB_SERVER_PORT}")

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
    await asyncio.Event().wait()

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    try:
        asyncio.run(main_webhook())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
