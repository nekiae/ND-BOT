import hmac
import hashlib
import json
import os
from dotenv import load_dotenv

# --- –ó–∞–≥—Ä—É–∑–∫–∞ .env –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ ---
load_dotenv()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
BASE_WEBHOOK_URL = os.getenv("BASE_WEBHOOK_URL")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH")
YOOKASSA_WEBHOOK_PATH = os.getenv("YOOKASSA_WEBHOOK_PATH")
WEB_SERVER_HOST = os.getenv("WEB_SERVER_HOST")
WEB_SERVER_PORT = int(os.getenv("WEB_SERVER_PORT", 8080))
ADMIN_IDS = [int(admin_id) for admin_id in os.getenv("ADMIN_IDS", "").split(',') if admin_id]

import asyncio
from contextlib import suppress
import logging
from datetime import datetime, timezone
import sys

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

class AdminStates(StatesGroup):
    GIVE_SUB_USERNAME = State()
    REVOKE_SUB_USERNAME = State()
    BROADCAST_MESSAGE = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

from aiogram.types import BotCommand
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import (
    Message,
    CallbackQuery,
    InputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from yookassa.domain.notification import WebhookNotification

from core.scheduler import setup_scheduler
from core.webhooks import yookassa_webhook_handler

# --- –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ ---
from core.payments import create_yookassa_payment
from database import (
    create_db_and_tables, add_user, check_subscription, 
    give_subscription_to_user, get_user, decrement_user_analyses, decrement_user_messages,
    get_bot_statistics, get_user_by_username, revoke_subscription, get_all_users
)
from core.validators import validate_and_analyze_photo
from core.report_logic import generate_report_text
from core.integrations.deepseek import get_deepseek_response
from core.utils import split_long_message
import re

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class ChatStates(StatesGroup):
    getting_front_photo = State()
    getting_profile_photo = State()
    chatting = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞ –ø–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ –æ—Ç—á—ë—Ç–∞

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ --- #
logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'
)

# --- –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ HTML --- #

def sanitize_html_for_telegram(text: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏ <b> / <i>, —á—Ç–æ–±—ã Telegram —Å–º–æ–≥ —Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º **bold** –∏ *italic* –≤ HTML, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞
    def bold_repl(match):
        inner = match.group(1)
        if inner.strip().startswith('-'):
            return match.group(0)  # –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        return f"<b>{inner}</b>"

    def italic_repl(match):
        inner = match.group(1)
        if inner.strip().startswith('-'):
            return match.group(0)
        return f"<i>{inner}</i>"

    text = re.sub(r"\*\*(.*?)\*\*", bold_repl, text, flags=re.S)
    text = re.sub(r"(?<!-)\*(?![\s*-])(.*?)\*(?!\S)", italic_repl, text, flags=re.S)

    for tag in ("b", "i"):
        opens = len(re.findall(fr"<{tag}>", text))
        closes = len(re.findall(fr"</{tag}>", text))
        if opens > closes:
            text += "</" + tag + ">" * (opens - closes)
    return text

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --- #
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS_STR = os.getenv("ADMIN_IDS", "")
ADMIN_IDS = [int(admin_id) for admin_id in ADMIN_IDS_STR.split(',') if admin_id.strip()]
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")

WEB_SERVER_HOST = os.getenv("WEB_SERVER_HOST", "0.0.0.0")
WEB_SERVER_PORT = int(os.getenv("WEB_SERVER_PORT", 8080))
BASE_WEBHOOK_URL = os.getenv("BASE_WEBHOOK_URL")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Å–∏–º–≤–æ–ª–æ–º ':'
TELEGRAM_WEBHOOK_PATH = '/webhook'
YOOKASSA_WEBHOOK_PATH = os.getenv("YOOKASSA_WEBHOOK_PATH", "/yookassa/webhook")

if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")

dp = Dispatcher()
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --- #
def escape_html(text: str) -> str:
    """Escapes characters for Telegram HTML parsing."""
    return text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;')

def get_main_keyboard(is_admin_user: bool):
    buttons = [
        [InlineKeyboardButton(text="üì∏ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="start_analysis")],

    ]
    if is_admin_user:
        buttons.append([InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_payment_keyboard(payment_url: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)]
    ])

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ --- #
@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    user_id = message.from_user.id
    logger.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª /start")
    await add_user(user_id, message.from_user.username)
    
    is_admin_user = is_admin(user_id)
    has_subscription = await check_subscription(user_id)

    if is_admin_user:
        await message.answer("üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=get_main_keyboard(True))
        return

    if has_subscription:
        user = await get_user(user_id)
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {user.is_active_until.strftime('%d.%m.%Y')}.\n"
            f"–ê–Ω–∞–ª–∏–∑–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {user.analyses_left}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {user.messages_left}",
            reply_markup=get_main_keyboard(False)
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç, —è ND | Lookism ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω—Ç–æ—Ä –≤ –º–∏—Ä–µ –ª—é–∫—Å–º–∞–∫—Å–∏–Ω–≥–∞.\n\n" 
            "–ù–µ–º–Ω–æ–≥–æ —Ç–æ–≥–æ, —á—Ç–æ —è —É–º–µ—é:\n" 
            "‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞–Ω—Ñ–∞—Å + –ø—Ä–æ—Ñ–∏–ª—å (—É–≥–ª—ã, —Å–∏–º–º–µ—Ç—Ä–∏—è, skin –∏ —Ç.–¥.)\n" 
            "‚Äî —Å—Ç–∞–≤–ª—é —Ä–µ–π—Ç–∏–Ω–≥ Sub-5 ‚Üí PSL-God —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–ª–∞–Ω–æ–º\n" 
            "‚Äî –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Å —É—á–µ—Ç–æ–º —Ç–≤–æ–∏—Ö –º–µ—Ç—Ä–∏–∫\n\n" 
            "–Ø –Ω–µ –æ–±—ã—á–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç. ND –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∏ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏. –ò –≤—Å—ë, —á—Ç–æ —Ç—ã —É—Å–ª—ã—à–∏—à—å –æ—Ç –º–µ–Ω—è, —ç—Ç–æ —Ä–∞–±–æ—á–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏ –¥–∞–Ω–Ω—ã–µ.\n" 
            "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–º–µ–ª–æ –∑–∞–±—ã—Ç—å –ø—Ä–æ –∫–æ—É–ø –º–µ—Ç–æ–¥—ã, –≥–∞–π–¥—ã —Å –æ—Ç–∫–∞—Ç–∞–º–∏, –Ω–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."
        )
        await process_payment_start(message)

@dp.callback_query(F.data == "subscribe")
async def process_payment_callback(cq: CallbackQuery):
    await process_payment_start(cq.message)

async def process_payment_start(message: types.Message):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üí∞ –û–ü–õ–ê–¢–ò–¢–¨", callback_data="pay"))
    await message.answer(
        "üìú –ü–æ–¥–ø–∏—Å–∫–∞: 990–† / –º–µ—Å—è—Ü\n"
        "–í–∫–ª—é—á–∞–µ—Ç 3 –ø–æ–ª–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –∏ 200 —Å–æ–æ–±—â–µ–Ω–∏–π-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.\n\n"
        "üí≤ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –û–ü–õ–ê–¢–ò–¢–¨, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø.",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(F.data == "pay")
async def pay_button_callback(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    bot_info = await bot.get_me()
    bot_username = bot_info.username

    payment = create_yookassa_payment(user_id=user_id, amount="5.00", bot_username=bot_username)
    if payment:
        await callback.message.answer(
            "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –≥–æ—Ç–æ–≤–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment.confirmation.confirmation_url)]
            ])
        )
    else:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

@dp.callback_query(F.data == "start_analysis")
async def start_analysis(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = await get_user(user_id)

    if is_admin(user_id):
        await state.set_state(ChatStates.getting_front_photo)
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å (–ª–∏—Ü–æ –ø—Ä—è–º–æ).")
        await callback.answer()
        return

    has_subscription = await check_subscription(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if not has_subscription:
        await callback.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏–∑—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.", show_alert=True)
        return

    if user.analyses_left <= 0:
        await callback.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–Ω–∞–ª–∏–∑—ã. –û–Ω–∏ –æ–±–Ω–æ–≤—è—Ç—Å—è —Å –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.", show_alert=True)
        return

    await state.set_state(ChatStates.getting_front_photo)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å (–ª–∏—Ü–æ –ø—Ä—è–º–æ).")
    await callback.answer()



@dp.message(Command("analyze"), StateFilter("*"))
async def analyze_command_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /analyze –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    user_id = message.from_user.id
    user = await get_user(user_id)

    if is_admin(user_id):
        await state.set_state(ChatStates.getting_front_photo)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å (–ª–∏—Ü–æ –ø—Ä—è–º–æ).")
        return

    has_subscription = await check_subscription(user_id)
    if not has_subscription:
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏–∑—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
        return

    if user.analyses_left <= 0:
        await message.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–Ω–∞–ª–∏–∑—ã. –û–Ω–∏ –æ–±–Ω–æ–≤—è—Ç—Å—è —Å –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.")
        return

    await state.set_state(ChatStates.getting_front_photo)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å (–ª–∏—Ü–æ –ø—Ä—è–º–æ).")


@dp.message(Command("stats"), StateFilter("*"))
async def show_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø–æ–¥–ø–∏—Å–∫–∞, –∞–Ω–∞–ª–∏–∑—ã, —Å–æ–æ–±—â–µ–Ω–∏—è."""
    user = await get_user(message.from_user.id)

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –¥–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not user or not user.is_active_until:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    # 2. –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ä–µ–º—è –∏–∑ –ë–î –∫ UTC, –µ—Å–ª–∏ –æ–Ω–æ "–Ω–∞–∏–≤–Ω–æ–µ"
    active_until = user.is_active_until
    if active_until.tzinfo is None:
        active_until = active_until.replace(tzinfo=timezone.utc)

    # 3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ UTC
    if active_until < datetime.now(timezone.utc):
        await message.answer("–°—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫.")
        return

    # 4. –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    active_until_str = active_until.strftime("%d.%m.%Y %H:%M")

    stats_text = (
        f"<b>üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"‚ñ™Ô∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:</b> {active_until_str} (UTC)\n"
        f"‚ñ™Ô∏è <b>–û—Å—Ç–∞–ª–æ—Å—å –∞–Ω–∞–ª–∏–∑–æ–≤:</b> {user.analyses_left}\n"
        f"‚ñ™Ô∏è <b>–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {user.messages_left}"
    )

    await message.answer(stats_text)


@dp.callback_query(F.data == "show_profile")
async def show_profile(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if user and user.is_active_until and user.is_active_until > datetime.utcnow():
        days_left = (user.is_active_until - datetime.utcnow()).days
        profile_text = (
            f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**\n\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: **{user.is_active_until.strftime('%d.%m.%Y')}**\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: **{days_left}**\n\n"
            f"–ê–Ω–∞–ª–∏–∑–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: **{user.analyses_left}**\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ: **{user.messages_left}**"
        )
        await callback.message.answer(profile_text)
    else:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚≠êÔ∏è –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay")]
        ]))
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ---
@dp.message(ChatStates.getting_front_photo, F.photo)
async def handle_front_photo(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å –æ—Ç user_id: {user_id}")

    success, result_or_error = await validate_and_analyze_photo(message, bot, is_front=True)

    if success:
        await state.update_data(front_photo_data=result_or_error)
        await message.answer("‚úÖ –§–æ—Ç–æ –∞–Ω—Ñ–∞—Å –ø—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å (–≤–∏–¥ —Å–±–æ–∫—É).")
        await state.set_state(ChatStates.getting_profile_photo)
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result_or_error}")


@dp.message(ChatStates.getting_profile_photo, F.photo)
async def handle_profile_photo(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç user_id: {user_id}")

    success, result_or_error = await validate_and_analyze_photo(message, bot, is_front=False)

    if success:
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç {user_id} –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é.")
        await state.update_data(profile_photo_analysis=result_or_error)

        user_data = await state.get_data()
        front_analysis_data = user_data.get('front_photo_data', {})
        profile_analysis_data = user_data.get('profile_photo_analysis', {})

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ run_analysis
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç Face++
        merged_data = {
            'front_photo_data': front_analysis_data,
            'profile_photo_data': profile_analysis_data
        }
        
        await run_analysis(user_id, state, bot, merged_data)

    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result_or_error}")


async def run_analysis(user_id: int, state: FSMContext, bot: Bot, analysis_data: dict):
    await bot.send_message(user_id, "‚úÖ –í—Å–µ —Ñ–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç—ã. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
    try:
        report_text = await generate_report_text(analysis_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±—É–¥—É—â–µ–≥–æ —á–∞—Ç–∞
        await state.update_data(last_report=report_text)

        message_parts = split_long_message(report_text)
        for i, part in enumerate(message_parts):
            await bot.send_message(user_id, part) # –û—Ç–∫–ª—é—á–∞–µ–º Markdown
            if i < len(message_parts) - 1:
                await asyncio.sleep(0.5)

        follow_up_message = """
–í –∞–Ω–∞–ª–∏–∑–µ –∏ –ø–ª–∞–Ω–µ —É–ª—É—á—à–µ–Ω–∏—è —è –º–æ–≥ —Ä–∞—Å–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–º–∏ –¥–ª—è —Ç–µ–±—è —Å–ª–æ–≤–∞–º–∏. –ï—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å, –∫–∞–∫ –¥–µ–ª–∞—Ç—å —Ç–æ—Ç –∏–ª–∏ –∏–Ω–æ–π –º–µ—Ç–æ–¥ - —Å–ø—Ä–æ—Å–∏. –Ø –∏ –º–æ–π –ò–ò —Å –ª—É–∫—Å–º–∞–∫—Å–µ—Ä—Å–∫–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∏–º —Ç–µ–±–µ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–∂–µ–º —Ç–µ–±–µ —Å—Ç–∞—Ç—å –∫—Ä–∞—Å–∏–≤–µ–µ.

–ê –µ—Å–ª–∏ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–º–µ–Ω—è–ª—Å—è –ª–∏ —Ç—ã, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /analyze, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑.
"""
        await bot.send_message(user_id, follow_up_message)

        await state.set_state(ChatStates.chatting)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞.")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ run_analysis –¥–ª—è user_id {user_id}: {e}", exc_info=True)
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫



        # --- –ù–æ–≤–∞—è, –Ω–∞–¥–µ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ ---
        full_response = ""
        update_task = None
        lock = asyncio.Lock()

        async def message_updater():
            # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–µ –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            last_sent_text = None
            while True:
                async with lock:
                    current_text = full_response
                
                if current_text and current_text != last_sent_text:
                    with suppress(TelegramBadRequest):
                        await sent_message.edit_text(current_text + " ‚ñå", parse_mode=None)
                        last_sent_text = current_text
                await asyncio.sleep(0.7) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏

        try:
            update_task = asyncio.create_task(message_updater())
            
            response_generator = get_deepseek_response(user_prompt=user_question, chat_history=chat_history)
            async for chunk in response_generator:
                async with lock:
                    full_response += chunk
            
        finally:
            if update_task:
                update_task.cancel()
                with suppress(asyncio.CancelledError):
                    await update_task

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∫—É—Ä—Å–æ—Ä–∞
        html_fixed = sanitize_html_for_telegram(full_response)
        try:
            await sent_message.edit_text(html_fixed, parse_mode=ParseMode.HTML)
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º ‚Äì –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                pass
            else:
                await sent_message.edit_text(full_response, parse_mode=None)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        chat_history.append({"role": "user", "content": user_question})
        chat_history.append({"role": "assistant", "content": full_response})
        await state.update_data(chat_history=chat_history)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ –¥–ª—è user_id {user_id}: {e}", exc_info=True)
        await temp_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ (AI) ---

@dp.message(StateFilter(None), F.text)
async def handle_all_text(message: types.Message):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –¥—Ä—É–≥–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏."""
    user_id = message.from_user.id
    user = await get_user(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ª–∏–º–∏—Ç–æ–≤
    if not is_admin(user_id):
        if not user or not user.is_active_until or user.is_active_until < datetime.now(timezone.utc):
            await message.answer("–î–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
            return
        if user.messages_left <= 0:
            await message.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ —Å –ò–ò. –û–Ω–∏ –æ–±–Ω–æ–≤—è—Ç—Å—è —Å –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.")
            return

    user_question = message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: '{user_question[:50]}...' (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)")

    temp_message = await message.answer("...")
    sent_message = await temp_message.edit_text("ND –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...")

    try:
        full_response = ""
        stream = get_deepseek_response(user_question, chat_history=[])
        
        async for chunk in stream:
            if chunk:
                full_response += chunk
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å Rate Limit
                if len(full_response) % 25 == 0:
                    try:
                        await sent_message.edit_text(full_response, parse_mode=None)
                    except Exception:
                        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        
        try:
            html_fixed = sanitize_html_for_telegram(full_response)
            await sent_message.edit_text(html_fixed, parse_mode=ParseMode.HTML)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º ‚Äì –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                pass
            else:
                await sent_message.edit_text(full_response, parse_mode=None)

        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if not is_admin(user_id):
            await decrement_user_messages(user_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º AI-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–ª—è user_id {user_id}: {e}", exc_info=True)
        await sent_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# --- –ù–æ–≤–∞—è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---

def get_admin_panel_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    buttons = [
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_start")],
        [InlineKeyboardButton(text="‚ûï –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="give_sub_start")],
        [InlineKeyboardButton(text="‚ûñ –û—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="revoke_sub_start")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.callback_query(F.data == "admin_panel")
async def handle_admin_panel(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    await state.clear()
    await callback.message.edit_text(
        "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> üëë",
        reply_markup=get_admin_panel_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "admin_stats")
async def handle_admin_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ."""
    stats = await get_bot_statistics()
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n- –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['active_subscriptions']}"
    await callback.answer(text, show_alert=True)

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ ---
@dp.callback_query(F.data.in_(["give_sub_start", "revoke_sub_start"]))
async def handle_sub_management_start(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç username –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π."""
    action = callback.data
    if action == "give_sub_start":
        await state.set_state(AdminStates.GIVE_SUB_USERNAME)
        prompt_text = "–í–≤–µ–¥–∏—Ç–µ Telegram username, –∫–æ–º—É –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:"
    else: # revoke_sub_start
        await state.set_state(AdminStates.REVOKE_SUB_USERNAME)
        prompt_text = "–í–≤–µ–¥–∏—Ç–µ Telegram username, —É –∫–æ–≥–æ –æ—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:"
    
    await callback.message.edit_text(
        prompt_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
    )
    await callback.answer()

@dp.message(StateFilter(AdminStates.GIVE_SUB_USERNAME, AdminStates.REVOKE_SUB_USERNAME))
async def process_username_for_sub(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π username –∏ –≤—ã–¥–∞–µ—Ç/–æ—Ç–∑—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É."""
    current_state = await state.get_state()
    username = message.text.lstrip('@')
    
    user_obj = await get_user_by_username(username)
    if not user_obj:
        response_text = f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω @{username}."
    else:
        if current_state == AdminStates.GIVE_SUB_USERNAME:
            await give_subscription_to_user(user_obj.id)
            response_text = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ @{username}."
        else:  # REVOKE_SUB_USERNAME
            success = await revoke_subscription(user_obj.id)
            response_text = f"üóë –ü–æ–¥–ø–∏—Å–∫–∞ @{username} –æ—Ç–æ–∑–≤–∞–Ω–∞." if success else f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω @{username}."

    await state.clear()
    await message.answer(response_text)
    await message.answer("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> üëë", reply_markup=get_admin_panel_keyboard())

# --- –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ---
@dp.callback_query(F.data == "broadcast_start")
async def broadcast_start(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await state.set_state(AdminStates.BROADCAST_MESSAGE)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
    )
    await callback.answer()

@dp.message(AdminStates.BROADCAST_MESSAGE)
async def process_broadcast_message(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ."""
    broadcast_text = message.text
    await state.clear()

    users = await get_all_users()
    sent_count = 0
    failed_count = 0

    await message.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É... –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

    for user in users:
        try:
            await bot.send_message(user.id, broadcast_text)
            sent_count += 1
            await asyncio.sleep(0.05)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å API
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
            failed_count += 1

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}")
    await message.answer("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> üëë", reply_markup=get_admin_panel_keyboard())

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ Webhook --- #
async def set_main_menu(bot: Bot):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram."""
    main_menu_commands = [
        BotCommand(command='/start', description='üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        BotCommand(command='/analyze', description='üí° –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑'),
        BotCommand(command='/stats', description='üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    ]
    await bot.set_my_commands(main_menu_commands)


async def on_startup(bot: Bot):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    await set_main_menu(bot)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è Telegram –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ª—ç—à –Ω–∞ –∫–æ–Ω—Ü–µ —É BASE_WEBHOOK_URL
    clean_base = (BASE_WEBHOOK_URL or "").strip().rstrip("/")
    webhook_url = f"{clean_base}{TELEGRAM_WEBHOOK_PATH}"
    # –†–∞–∑—Ä–µ—à–∞–µ–º Telegram –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –∞–ø–¥–µ–π—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è callback_query)
    allowed_updates = [
        "message",
        "callback_query",
        "inline_query",
        "chat_member",
        "my_chat_member"
    ]
    await bot.set_webhook(webhook_url, drop_pending_updates=True, allowed_updates=allowed_updates)
    logger.info(f"–í–µ–±—Ö—É–∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {webhook_url}")

async def on_shutdown(bot: Bot):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞...")
    await bot.delete_webhook()

async def main_webhook():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞."""
    await create_db_and_tables()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º on_startup –∏ on_shutdown
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
    app = web.Application()

    # –ö–ª—é—á–µ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø–µ—Ä–µ–¥–∞–µ–º –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–µ–±—Ö—É–∫–∞—Ö
    app['bot'] = bot

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    # 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Telegram
    telegram_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    telegram_handler.register(app, path=WEBHOOK_PATH)

    # 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è YooKassa
    app.router.add_post(YOOKASSA_WEBHOOK_PATH, yookassa_webhook_handler)

    # –ì–æ—Ç–æ–≤–∏–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Telegram –≤–µ–±—Ö—É–∫-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—É—Ç—å (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±–æ–π —Ç–æ–∫–µ–Ω)
    setup_application(app, dp, bot=bot, path=TELEGRAM_WEBHOOK_PATH)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, WEB_SERVER_HOST, WEB_SERVER_PORT)
    await site.start()

    logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{WEB_SERVER_HOST}:{WEB_SERVER_PORT}")

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
    await asyncio.Event().wait()

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    try:
        asyncio.run(main_webhook())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
