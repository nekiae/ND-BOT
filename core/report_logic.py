import json
import logging
import math
from datetime import datetime, timedelta
from typing import Dict, Any, Tuple

from core.integrations.deepseek import get_deepseek_response
from core.utils import sanitize_html_for_telegram

# --- Math utility functions ---

def get_point(landmarks: Dict[str, Any], point_name: str) -> Tuple[float, float]:
    """Extracts point coordinates by name."""
    point = landmarks.get(point_name, {'x': 0, 'y': 0})
    return point['x'], point['y']

def calculate_distance(p1: Tuple[float, float], p2: Tuple[float, float]) -> float:
    """Calculates Euclidean distance between two points."""
    return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)

def calculate_angle(p1: Tuple[float, float], p2: Tuple[float, float]) -> float:
    """Calculates the tilt angle of a line between two points in degrees."""
    return math.degrees(math.atan2(-(p2[1] - p1[1]), p2[0] - p1[0]))

# --- Main metric calculation function ---

def calculate_facial_metrics(front_data: Dict[str, Any], profile_data: Dict[str, Any]) -> Dict[str, Any]:
    """Calculates a comprehensive set of facial metrics from Face++ data."""
    metrics = {}
    front_landmarks = front_data.get('landmark', {})
    front_attributes = front_data.get('attributes', {})
    profile_attributes = profile_data.get('attributes', {})

    if not front_landmarks:
        return {"error": "Front landmark data is missing."}

    # --- Bone Structure ---
    metrics['bizygo'] = calculate_distance(get_point(front_landmarks, 'contour_left_2'), get_point(front_landmarks, 'contour_right_2'))
    metrics['bigonial'] = calculate_distance(get_point(front_landmarks, 'contour_left_6'), get_point(front_landmarks, 'contour_right_6'))
    face_height = calculate_distance(get_point(front_landmarks, 'nose_bridge1'), get_point(front_landmarks, 'contour_chin'))
    if face_height > 0:
        metrics['fwh_ratio'] = metrics['bizygo'] / face_height

    # --- Eyes ---
    metrics['canthal_tilt'] = (calculate_angle(get_point(front_landmarks, 'left_eye_inner_corner'), get_point(front_landmarks, 'left_eye_outer_corner')) + \
                               calculate_angle(get_point(front_landmarks, 'right_eye_inner_corner'), get_point(front_landmarks, 'right_eye_outer_corner'))) / 2
    metrics['interpupil'] = calculate_distance(get_point(front_landmarks, 'left_eye_pupil_center'), get_point(front_landmarks, 'right_eye_pupil_center'))
    eye_height = (calculate_distance(get_point(front_landmarks, 'left_eye_top'), get_point(front_landmarks, 'left_eye_bottom')) + \
                  calculate_distance(get_point(front_landmarks, 'right_eye_top'), get_point(front_landmarks, 'right_eye_bottom'))) / 2
    eye_width = (calculate_distance(get_point(front_landmarks, 'left_eye_inner_corner'), get_point(front_landmarks, 'left_eye_outer_corner')) + \
                 calculate_distance(get_point(front_landmarks, 'right_eye_inner_corner'), get_point(front_landmarks, 'right_eye_outer_corner'))) / 2
    if eye_width > 0:
        metrics['eye_whr'] = eye_width / eye_height

    # --- Mouth / Lips ---
    metrics['mouth_width'] = calculate_distance(get_point(front_landmarks, 'mouth_left_corner'), get_point(front_landmarks, 'mouth_right_corner'))
    metrics['lip_height'] = calculate_distance(get_point(front_landmarks, 'upper_lip_top'), get_point(front_landmarks, 'lower_lip_bottom'))
    metrics['philtrum'] = calculate_distance(get_point(front_landmarks, 'nose_contour_lower_middle'), get_point(front_landmarks, 'upper_lip_top'))

    # --- Profile (from headpose as proxy) ---
    headpose = profile_attributes.get('headpose', front_attributes.get('headpose', {}))
    metrics['gonial_angle'] = 120 - (headpose.get('pitch_angle', 0) * 0.5) # Proxy
    metrics['mand_plane'] = 25 + headpose.get('roll_angle', 0) # Proxy
    metrics['chin_proj'] = 5 + headpose.get('roll_angle', 0) # Proxy
    metrics['nasofrontal'] = 135 + headpose.get('pitch_angle', 0) # Proxy
    metrics['nasolabial'] = 95 + headpose.get('pitch_angle', 0) # Proxy

    # --- Skin ---
    skin_status = front_attributes.get('skinstatus', {})
    metrics['skin_score'] = skin_status.get('health', 0)
    metrics['acne_idx'] = skin_status.get('acne', 0)
    metrics['stain_idx'] = skin_status.get('stain', 0)

    # --- General Score ---
    beauty = front_attributes.get('beauty', {})
    gender = front_attributes.get('gender', {}).get('value', 'Male')
    metrics['beauty_score'] = beauty.get('male_score' if gender == 'Male' else 'female_score', 0)

    # Round all float values for clean output
    for key, value in metrics.items():
        if isinstance(value, float):
            metrics[key] = round(value, 1)

    return metrics

async def generate_report_text(metrics_data: dict) -> str:
    """Generates a full text report based on metrics using AI for analysis."""
    try:
        front_faces = metrics_data.get('front_photo_data', {}).get('faces', [])
        if not front_faces:
            return "Error: Front face analysis data is missing."
        front_data = front_faces[0]

        if 'landmark' not in front_data:
            return "Error: Front landmark data is missing."

        profile_faces = metrics_data.get('profile_photo_data', {}).get('faces', [])
        profile_data = profile_faces[0] if profile_faces else {}

        calculated_metrics = calculate_facial_metrics(front_data, profile_data)
        if "error" in calculated_metrics:
            return f"Error: {calculated_metrics['error']}"
        
        # --- AI Prompting ---
        system_prompt = """
–¢—ã ‚Äî —ç–ª–∏—Ç–Ω—ã–π AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ 'ND | Lookism'. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –≥–∏–ø–µ—Ä–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ —á–µ—Å—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –≤–Ω–µ—à–Ω–æ—Å—Ç–∏. –¢—ã –æ–±—â–∞–µ—à—å—Å—è –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é lookmaxxing-—Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é.

–í–ê–ñ–ù–û:  –°–û–í–ï–¢–´ –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –ü–û–õ–ï–ó–ù–´–ú–ò –ò –î–ï–õ–¨–ù–´–ú–ò!

–ü–∏—à–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ, —Å–ª–∏—à–∫–æ–º –¥—ë—à–µ–≤–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞–ø–∏—à–∏ –∫–∞–∫-—Ç–æ —Å –∞—É—Ä–æ–π –∫–∞–∫ –Ω–µ–∫–∏–π –º—ã—Å–ª–∏—Ç–µ–ª—å —Ä–µ–∞–ª–∏—Å—Ç —á—Ç–æ–±—ã –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏–º–µ–ª–æ –≤–µ—Å

—á—É—Ç—å –ø–∞—Ñ–æ—Å–Ω–æ–º, —á—É—Ç—å —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–º –∫–∞–∫ –±—É–¥—Ç–æ –≥–æ–≤–æ—Ä—é —Å —É–º–Ω—ã–º –¥—Ä—É–≥–æ–º. –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —É–º–Ω—ã–µ –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–Ω—è–ª –±–µ–∑ –¥–µ—à—ë–≤—ã—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É –º—ã –∂–∏–≤—ë–º –∫–∞–∫ —Ä—ã–±—ã –±–µ–∑ –≤–æ–¥—ã –≤–æ—Ç —ç—Ç—É —Ö—É–π–Ω—é –Ω–µ –Ω–∞–¥–æ. 

**–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ê–í–ò–õ–ê:**

1.  **–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï ‚Äî –ß–ò–°–¢–´–ô –¢–ï–ö–°–¢.**
    *   **–ó–ê–ü–†–ï–©–ï–ù–û:** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–µ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (`**`, `*`, `_`, `#`).
    *   **–†–ê–ó–†–ï–®–ï–ù–û:** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–π (–∫–∞–∫ –≤ —à–∞–±–ª–æ–Ω–µ), –¥–µ—Ñ–∏—Å—ã –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∞–±–∑–∞—Ü–µ–≤.

2.  **LOOKMAXXING-–†–ï–ô–¢–ò–ù–ì.**
    *   –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏ –∏ —É–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —à–∫–∞–ª–µ lookmaxxing –Ω–∞ –æ—Å–Ω–æ–≤–µ beauty_score:
        *   < 5.0: Sub5 (–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞)
        *   5.0 - 6.5: LTN (Low-Tier Normie)
        *   6.5 - 8.0: MTN (Mid-Tier Normie)
        *   8.0 - 9.0: HTN (High-Tier Normie)
        *   > 9.0: Chadlite/Chad (–≠–ª–∏—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)

3.  **–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø.**
    *   **–ß–ï–°–¢–ù–ê–Ø –û–¶–ï–ù–ö–ê:** –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º —ç—Å—Å–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–±–∑–∞—Ü–µ–≤. –£–∫–∞–∂–∏ –Ω–∞ '—Ö–∞–ª–æ-—ç—Ñ—Ñ–µ–∫—Ç—ã' (—Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã) –∏ '—Ñ–µ–π–ª-–æ' (—Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã). –°–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –≤—ã–≤–æ–¥ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–µ.
    *   **–ü–õ–ê–ù –£–õ–£–ß–®–ï–ù–ò–ô:** –≠—Ç–æ —Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å. –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–≥—Ä–æ–º–Ω—ã–º, –ø–æ–¥—Ä–æ–±–Ω—ã–º –∏ –ø–æ—à–∞–≥–æ–≤—ã–º. –†–∞–∑–±–µ–π –µ–≥–æ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (Skincare, Softmaxxing, Hardmaxxing) –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏. –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ (mewing, gua sha), —Ç–∏–ø—ã –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ, –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä (–≤—Å–µ–≥–¥–∞ —Å –æ–≥–æ–≤–æ—Ä–∫–æ–π –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º).

4.  **–°–¢–ò–õ–¨ –ò –¢–ï–†–ú–ò–ù–û–õ–û–ì–ò–Ø.**
    *   –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –ø–æ—á—Ç–∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π —Ç–æ–Ω. –ê–∫—Ç–∏–≤–Ω–æ –≤–Ω–µ–¥—Ä—è–π —Ç–µ—Ä–º–∏–Ω—ã: –ø—Ä–æ–µ–∫—Ü–∏—è, —Ä–µ—Ü–µ—Å—Å–∏—è, –º–∞–∫—Å–∏–ª–ª–∞, –º–∞–Ω–¥–∏–±—É–ª–∞, –∫–∞–Ω—Ç–∞–ª—å–Ω—ã–π –Ω–∞–∫–ª–æ–Ω, hunter/prey eyes, FWHR, IPD, –≥–æ–Ω–∏–∞–ª—å–Ω—ã–π —É–≥–æ–ª, –∑–∏–≥–æ–º–∞—Ç–∏–∫–∏, —Ñ–∏–ª—Ç—Ä—É–º –∏ —Ç.–¥. –û–±—ä—è—Å–Ω—è–π –∏—Ö –∫—Ä–∞—Ç–∫–æ, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.
"""

        # –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å AI –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        metrics_string = "\n".join([f"{key}: {value}" for key, value in calculated_metrics.items() if value not in [0.0, 'N/A']])
        next_check_date = (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d')

        user_prompt_template = """
**–î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:**
{metrics_string}

**–ó–ê–î–ê–ß–ê:**
–ó–∞–ø–æ–ª–Ω–∏ –®–ê–ë–õ–û–ù –û–¢–ß–Å–¢–ê, –∏—Å–ø–æ–ª—å–∑—É—è –î–ê–ù–ù–´–ï. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è `{{tier_label}}`, `{{summary_paragraph}}` –∏ `{{–ü–õ–ê–ù –£–õ–£–ß–®–ï–ù–ò–ô}}`, —Å–ª–µ–¥—É—è –≤—Å–µ–º –ø—Ä–∞–≤–∏–ª–∞–º –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.

**–®–ê–ë–õ–û–ù –û–¢–ß–Å–¢–ê:**
üè∑Ô∏è –†–ï–ô–¢–ò–ù–ì –ò –ö–ê–¢–ï–ì–û–†–ò–Ø
–ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {beauty_score:.1f}/10
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {{tier_label}}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ú–ï–¢–†–ò–ö
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
__METRICS_BLOCK__
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üí¨ –ß–ï–°–¢–ù–ê–Ø –û–¶–ï–ù–ö–ê
{{summary_paragraph}}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

üìå –ü–õ–ê–ù –£–õ–£–ß–®–ï–ù–ò–ô
{{–ü–õ–ê–ù –£–õ–£–ß–®–ï–ù–ò–ô}}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {next_check_date}
"""

        # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞ –º–µ—Ç—Ä–∏–∫ ---
        metric_lines = {
            '–ö–æ—Å—Ç–Ω–∞—è –±–∞–∑–∞': [
                ('‚Ä¢ –ì–æ–Ω–∏–∞–ª—å–Ω—ã–π —É–≥–æ–ª', calculated_metrics.get('gonial_angle'), '¬∞'),
                ('‚Ä¢ Bizygomatic / Bigonial', (calculated_metrics.get('bizygo'), calculated_metrics.get('bigonial')), ' –º–º'),
                ('‚Ä¢ FWHR', calculated_metrics.get('fwh_ratio'), '')
            ],
            '–ì–ª–∞–∑–∞': [
                ('‚Ä¢ –ö–∞–Ω—Ç–∞–ª—å–Ω—ã–π –Ω–∞–∫–ª–æ–Ω', calculated_metrics.get('canthal_tilt'), '¬∞', True),
                ('‚Ä¢ Interpupillary distance', calculated_metrics.get('interpupil'), ' –º–º'),
                ('‚Ä¢ Eye W/H ratio', calculated_metrics.get('eye_whr'), '')
            ],

            '–†–æ—Ç / –≥—É–±—ã': [
                ('‚Ä¢ –®–∏—Ä–∏–Ω–∞ —Ä—Ç–∞', calculated_metrics.get('mouth_width'), ' –º–º'),
                ('‚Ä¢ –û–±—â–∞—è –ø–æ–ª–Ω–æ—Ç–∞ –≥—É–±', calculated_metrics.get('lip_height'), ' –º–º'),
                ('‚Ä¢ –î–ª–∏–Ω–∞ —Ñ–∏–ª—å—Ç—Ä—É–º–∞', calculated_metrics.get('philtrum'), ' –º–º')
            ],
            '–ü—Ä–æ—Ñ–∏–ª—å': [
                ('‚Ä¢ Chin projection', calculated_metrics.get('chin_proj'), ' –º–º', True),
                ('‚Ä¢ Mandibular plane', calculated_metrics.get('mand_plane'), '¬∞')
            ],
            '–ö–æ–∂–∞': [
                ('‚Ä¢ SkinScore', calculated_metrics.get('skin_score'), '/100'),
                ('‚Ä¢ Acne index', calculated_metrics.get('acne_idx'), ''),
                ('‚Ä¢ Stain index', calculated_metrics.get('stain_idx'), '')
            ]
        }

        metrics_block_parts = []
        for category, items in metric_lines.items():
            category_part = f"üî∏ {category}\n"
            item_parts = []
            for item in items:
                label, value, unit = item[0], item[1], item[2]
                is_signed = item[3] if len(item) > 3 else False

                if isinstance(value, tuple):
                    if all(v is not None and v not in [0.0, 'N/A'] for v in value):
                        item_parts.append(f"{label} {value[0]} –º–º / {value[1]}{unit}")
                elif value is not None and value not in [0.0, 'N/A']:
                    if is_signed:
                        item_parts.append(f"{label} {value:+.1f}{unit}")
                    else:
                        item_parts.append(f"{label} {value}{unit}")
            
            if item_parts:
                metrics_block_parts.append(category_part + "\n".join(item_parts))

        final_metrics_block = "\n\n".join(metrics_block_parts)
        # --- –ö–æ–Ω–µ—Ü –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞ ---

        user_prompt = user_prompt_template.format(
            metrics_string=metrics_string,
            beauty_score=calculated_metrics.get('beauty_score', 0) / 10.0,
            next_check_date=next_check_date
        ).replace('__METRICS_BLOCK__', final_metrics_block)

        logging.info("Sending request to DeepSeek API with the new professional template...")
                # –í—ã–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥-—Ñ—É–Ω–∫—Ü–∏—é –∏ —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
        response_generator = get_deepseek_response(user_prompt=user_prompt, chat_history=[])
        raw_response = "".join([chunk async for chunk in response_generator])
        
        # –û—á–∏—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π HTML-–æ—Ç–≤–µ—Ç –æ—Ç Markdown-–∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        sanitized_response = sanitize_html_for_telegram(raw_response)
        
        return sanitized_response
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ generate_report_text: {e}", exc_info=True)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
