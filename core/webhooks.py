from aiohttp import web
from aiogram import Bot
import logging

from database import give_subscription_to_user as grant_subscription

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ
# –ï—Å–ª–∏ –Ω–µ—Ç, –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
SUBSCRIPTION_ANALYSES = 2
SUBSCRIPTION_MESSAGES = 200

async def yookassa_webhook_handler(request: web.Request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –≤–µ–±—Ö—É–∫–∏ –æ—Ç YooKassa."""
    bot: Bot = request.app['bot']
    data = None
    try:
        data = await request.json()
        logging.info(f"üîî –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç YooKassa: {data}")

        if data.get('event') == 'payment.succeeded':
            payment_info = data.get('object', {})
            user_id = int(payment_info.get('metadata', {}).get('user_id'))

            if user_id:
                await grant_subscription(user_id, analyses=SUBSCRIPTION_ANALYSES, messages=SUBSCRIPTION_MESSAGES, source='purchased')

                new_text = (
                    f"‚úÖ –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                    f"–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ ND.\n\n"
                    f"–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /analyze –∏ —è –ø–æ—Å–º–æ—Ç—Ä—é –Ω–∞ —Ç–µ–±—è, –ø–æ–º–æ–≥—É.\n\n"
                    f"–ò–ª–∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∏ —è —Ç–µ–±–µ –æ—Ç–≤–µ—á—É, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Ç–µ—Ä–∞–±–∞–π—Ç–∞—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á—Ç–æ –≤ –º–µ–Ω—è –∑–∞–≥—Ä—É–∑–∏–ª–∏.\n\n"
                    f"–í—Å–µ–≥–æ —É —Ç–µ–±—è {SUBSCRIPTION_ANALYSES} —Ñ–æ—Ç–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ {SUBSCRIPTION_MESSAGES} —Å–æ–æ–±—â–µ–Ω–∏–π. –î–µ–π—Å—Ç–≤—É–π."
                )

                await bot.send_message(
                    chat_id=user_id,
                    text=new_text
                )
                logging.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è user_id {user_id} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
            else:
                logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω user_id –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞.")

        return web.Response(status=200)

    except Exception as e:
        user_id_info = ""
        if data:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ—á—å user_id –¥–ª—è –ª–æ–≥–∞
                user_id_info = f" –¥–ª—è user_id {data['object']['metadata']['user_id']}"
            except (KeyError, TypeError):
                pass # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞{user_id_info}: {e}", exc_info=True)
        return web.Response(status=500, text="Internal Server Error")
