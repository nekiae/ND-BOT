import asyncio
import logging

from aiogram import Bot, F, Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery, InlineKeyboardButton,
    InlineKeyboardMarkup, Message
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core.states import AdminAmbassador, AdminStates, IsAdminFilter
from database import (
    confirm_referral_payouts, get_all_ambassadors,
    get_all_users, get_bot_statistics,
    get_pending_payouts_count, get_referral_stats,
    get_subscription_stats, get_user_by_username,
    get_user_detailed_stats, give_subscription_to_user,
    revoke_subscription, set_ambassador_status,
    get_subscribed_users, get_unsubscribed_users # For targeted broadcast
)

logger = logging.getLogger(__name__)
admin_router = Router()
# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
admin_router.message.filter(IsAdminFilter())
admin_router.callback_query.filter(IsAdminFilter())


def get_admin_panel_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="admin_stats"))
    keyboard.row(InlineKeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_start"))
    keyboard.row(InlineKeyboardButton(text="‚ûï –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="give_sub_start"))
    keyboard.row(InlineKeyboardButton(text="‚ûñ –û—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="revoke_sub_start"))
    keyboard.row(InlineKeyboardButton(text="üëë –ê–º–±–∞—Å—Å–∞–¥–æ—Ä—ã", callback_data="manage_ambassadors"))
    keyboard.row(InlineKeyboardButton(text="üîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="user_stats_start"))
    return keyboard.as_markup()


@admin_router.callback_query(F.data == "user_stats_start")
async def user_stats_start(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç username –¥–ª—è –ø–æ–∫–∞–∑–∞ –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    await state.set_state(AdminStates.USER_STATS_USERNAME)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –±–µ–∑ @):")
    await callback.answer()


@admin_router.message(StateFilter(AdminStates.USER_STATS_USERNAME), F.text)
async def process_user_stats(message: types.Message, state: FSMContext):
    username = message.text.strip().lstrip('@')
    user_obj = await get_user_by_username(username)
    if not user_obj:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        stats = await get_user_detailed_stats(user_obj.id)
        sub_line = (
            f"–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {stats['active_until'].strftime('%d.%m.%Y')}" if stats['subscription_active'] else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
        )
        text = (
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username}</b> (ID {user_obj.id})\n\n"
            f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞: {sub_line}\n"
            f"üìä –ê–Ω–∞–ª–∏–∑–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {stats['analyses_left']} | –°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages_left']}\n"
        )
        if stats['is_ambassador']:
            text += (
                "\nüëë <b>–ê–º–±–∞—Å—Å–∞–¥–æ—Ä</b>\n"
                f"–í—Å–µ–≥–æ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö: {stats['total_paid_referrals']}\n"
                f"–û–∂–∏–¥–∞—é—Ç –≤—ã–ø–ª–∞—Ç—ã: {stats['pending_payouts']}"
            )
        await message.answer(text, disable_web_page_preview=True)
    await state.clear()


@admin_router.callback_query(F.data == "admin_panel")
async def handle_admin_panel(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    await state.clear()
    await callback.message.edit_text(
        "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> üëë",
        reply_markup=get_admin_panel_keyboard()
    )
    await callback.answer()


@admin_router.callback_query(F.data == "admin_stats")
async def handle_admin_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞."""
    try:
        bot_stats = await get_bot_statistics()
        sub_stats = await get_subscription_stats()
        pending_payouts = await get_pending_payouts_count()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
        other_subs_line = f"\n   - –î—Ä—É–≥–∏–µ (—Å—Ç–∞—Ä—ã–µ/–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ): <b>{sub_stats['total_other']}</b>" if sub_stats['total_other'] > 0 else ""
        
        stats_text = (
            f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞</b>\n\n"
            f"<b>–û–±—â–µ–µ:</b>\n"
            f"- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{bot_stats['total_users']}</b>\n"
            f"- –ê–º–±–∞—Å—Å–∞–¥–æ—Ä—ã (–æ–∂–∏–¥–∞—é—Ç –≤—ã–ø–ª–∞—Ç—ã): <b>{pending_payouts}</b>\n\n"
            f"<b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>\n"
            f"- –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: <b>{sub_stats['total_active']}</b>\n"
            f"   - –ö—É–ø–ª–µ–Ω–Ω—ã–µ: <b>{sub_stats['total_purchased']}</b>\n"
            f"   - –í—ã–¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–æ–º: <b>{sub_stats['total_granted']}</b>{other_subs_line}\n\n"
            f"<b>–î–∏–Ω–∞–º–∏–∫–∞ (–Ω–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏):</b>\n"
            f"- –ó–∞ 24 —á–∞—Å–∞: <b>{sub_stats['new_24h']}</b>\n"
            f"- –ó–∞ 48 —á–∞—Å–æ–≤: <b>{sub_stats['new_48h']}</b>\n"
            f"- –ó–∞ 7 –¥–Ω–µ–π: <b>{sub_stats['new_7d']}</b>\n"
        )

        await callback.message.edit_text(
            stats_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ])
        )
    except Exception as e:
        logging.error(f"Error in handle_admin_stats: {e}", exc_info=True)
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    finally:
        await callback.answer()


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º–∏ ---
@admin_router.callback_query(F.data.startswith("confirm_payouts_"))
async def confirm_payouts(callback: types.CallbackQuery):
    """Confirms referral payouts for a specific ambassador."""
    try:
        ambassador_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞.", show_alert=True)
        return

    cleared_count = await confirm_referral_payouts(ambassador_id)

    if cleared_count > 0:
        await callback.answer(f"‚úÖ –°–±—Ä–æ—à–µ–Ω–æ {cleared_count} –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–ø–ª–∞—Ç.", show_alert=True)
    else:
        await callback.answer("–ù–µ—Ç –≤—ã–ø–ª–∞—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞.", show_alert=True)

    # Refresh the list
    await list_ambassadors(callback, should_answer=False)


@admin_router.callback_query(F.data == "list_ambassadors")
async def list_ambassadors(callback: types.CallbackQuery, should_answer: bool = True):
    """Displays a list of all ambassadors with their stats."""
    ambassadors = await get_all_ambassadors()
    if not ambassadors:
        await callback.answer("–°–ø–∏—Å–æ–∫ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤ –ø—É—Å—Ç.", show_alert=True)
        return

    response_text = "<b>üëë –°–ø–∏—Å–æ–∫ –ê–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤:</b>\n\n"
    keyboard = InlineKeyboardBuilder()

    for amb in ambassadors:
        stats = await get_referral_stats(amb.id)
        username = f"@{amb.username}" if amb.username else f"ID: {amb.id}"
        response_text += (
            f"<b>{username}</b>\n"
            f"  - –û–∂–∏–¥–∞—é—Ç –≤—ã–ø–ª–∞—Ç—ã: <code>{stats['pending_payouts']}</code>\n"
            f"  - –í—Å–µ–≥–æ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö: <code>{stats['total_paid_referrals']}</code>\n"
        )
        # Add a button to reset pending payouts if there are any
        if stats['pending_payouts'] > 0:
            response_text += f"  - <code><a href='tg://user?id={amb.id}'>–°–±—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—ã</a></code>\n\n"
            keyboard.add(InlineKeyboardButton(
                text=f"–°–±—Ä–æ—Å–∏—Ç—å {stats['pending_payouts']} –¥–ª—è {username}",
                callback_data=f"confirm_payouts_{amb.id}"
            ))
        else:
            response_text += "\n"

    keyboard.adjust(1)  # Make buttons full width
    keyboard.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_ambassadors"))

    await callback.message.edit_text(response_text, reply_markup=keyboard.as_markup())
    if should_answer:
        await callback.answer()


@admin_router.callback_query(F.data == "manage_ambassadors")
async def manage_ambassadors_start(callback: types.CallbackQuery):
    """Shows the ambassador management panel."""
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫", callback_data="list_ambassadors"))
    keyboard.add(InlineKeyboardButton(text="‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å", callback_data="set_ambassador_start"))
    keyboard.add(InlineKeyboardButton(text="‚ûñ –°–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="revoke_ambassador_start"))
    keyboard.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))

    await callback.message.edit_text("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º–∏", reply_markup=keyboard.as_markup())
    await callback.answer()


@admin_router.callback_query(F.data.in_(["set_ambassador_start", "revoke_ambassador_start"]))
async def handle_ambassador_management_start(callback: types.CallbackQuery, state: FSMContext):
    """Prompts for a username to manage ambassador status."""
    action = callback.data
    if action == "set_ambassador_start":
        await state.set_state(AdminAmbassador.waiting_for_username_to_set)
        prompt_text = "–í–≤–µ–¥–∏—Ç–µ username, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–º (–º–æ–∂–Ω–æ –±–µ–∑ @):"
    else:  # revoke_ambassador_start
        await state.set_state(AdminAmbassador.waiting_for_username_to_revoke)
        prompt_text = "–í–≤–µ–¥–∏—Ç–µ username, —á—Ç–æ–±—ã –æ—Ç–æ–∑–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ (–º–æ–∂–Ω–æ –±–µ–∑ @):"

    await callback.message.edit_text(prompt_text)
    await callback.answer()


@admin_router.message(StateFilter(AdminAmbassador.waiting_for_username_to_set, AdminAmbassador.waiting_for_username_to_revoke), F.text)
async def process_username_for_ambassador(message: types.Message, state: FSMContext):
    """Processes the username and sets or revokes ambassador status."""
    current_state = await state.get_state()
    username = message.text.strip()
    user = await get_user_by_username(username)

    if not user:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    if current_state == AdminAmbassador.waiting_for_username_to_set:
        success = await set_ambassador_status(user.id, True)
        response_text = f"‚úÖ @{username} —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–º." if success else f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å @{username} –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–º."
    else:  # waiting_for_username_to_revoke
        success = await set_ambassador_status(user.id, False)
        response_text = f"üóë –°—Ç–∞—Ç—É—Å –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ –¥–ª—è @{username} —Å–Ω—è—Ç." if success else f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å —Å @{username}."

    await message.answer(response_text)
    await state.clear()


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ --- #
@admin_router.callback_query(F.data.in_(["give_sub_start", "revoke_sub_start"]))
async def handle_sub_management_start(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç username –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π."""
    action = callback.data
    if action == "give_sub_start":
        await state.set_state(AdminStates.GIVE_SUB_USERNAME)
        prompt_text = "–í–≤–µ–¥–∏—Ç–µ Telegram username, –∫–æ–º—É –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–º–æ–∂–Ω–æ –±–µ–∑ @):"
    else:  # revoke_sub_start
        await state.set_state(AdminStates.REVOKE_SUB_USERNAME)
        prompt_text = "–í–≤–µ–¥–∏—Ç–µ Telegram username, —É –∫–æ–≥–æ –æ—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–º–æ–∂–Ω–æ –±–µ–∑ @):"

    await callback.message.edit_text(
        prompt_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
    )
    await callback.answer()


@admin_router.message(StateFilter(AdminStates.GIVE_SUB_USERNAME, AdminStates.REVOKE_SUB_USERNAME), F.text)
async def process_username_for_sub(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π username –∏ –≤—ã–¥–∞–µ—Ç/–æ—Ç–∑—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É."""
    current_state = await state.get_state()
    username = message.text.lstrip('@')

    user_obj = await get_user_by_username(username)
    if not user_obj:
        response_text = f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω @{username}."
    else:
        if current_state == AdminStates.GIVE_SUB_USERNAME:
            await give_subscription_to_user(user_obj.id)
            response_text = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ @{username}."
        else:  # REVOKE_SUB_USERNAME
            success = await revoke_subscription(user_obj.id)
            response_text = f"üóë –ü–æ–¥–ø–∏—Å–∫–∞ @{username} –æ—Ç–æ–∑–≤–∞–Ω–∞." if success else f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω @{username}."

    await state.clear()
    await message.answer(response_text)
    await message.answer("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> üëë", reply_markup=get_admin_panel_keyboard())


# --- –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ---
@admin_router.callback_query(F.data == "broadcast_start")
async def broadcast_start(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—é."""
    await state.set_state(AdminStates.BROADCAST_AUDIENCE)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="brd_all"))
    keyboard.row(InlineKeyboardButton(text="‚úÖ –¢–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="brd_subscribed"))
    keyboard.row(InlineKeyboardButton(text="‚ùå –¢–æ–ª—å–∫–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="brd_unsubscribed"))
    keyboard.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()


@admin_router.callback_query(StateFilter(AdminStates.BROADCAST_AUDIENCE), F.data.startswith("brd_"))
async def process_broadcast_audience(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    audience = callback.data.split('_')[1]
    await state.update_data(audience=audience)
    await state.set_state(AdminStates.BROADCAST_MESSAGE)

    await callback.message.edit_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
    )
    await callback.answer()


@admin_router.message(StateFilter(AdminStates.BROADCAST_MESSAGE), F.text)
async def process_broadcast_message(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏."""
    broadcast_text = message.text
    user_data = await state.get_data()
    audience = user_data.get('audience')
    await state.clear()

    users = []
    audience_text = ""
    if audience == 'all':
        users = await get_all_users()
        audience_text = "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    elif audience == 'subscribed':
        users = await get_subscribed_users()
        audience_text = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–æ–¥–ø–∏—Å–∫–æ–π"
    elif audience == 'unsubscribed':
        users = await get_unsubscribed_users()
        audience_text = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏"

    if not users:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.")
        await message.answer("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> üëë", reply_markup=get_admin_panel_keyboard())
        return

    sent_count = 0
    failed_count = 0

    await message.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É {audience_text}... –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}")

    for user in users:
        try:
            await bot.send_message(user.id, broadcast_text)
            sent_count += 1
            await asyncio.sleep(0.05)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å API
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
            failed_count += 1

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}")
    await message.answer("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> üëë", reply_markup=get_admin_panel_keyboard())
