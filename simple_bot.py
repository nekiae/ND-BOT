"""HD | Lookism Telegram Bot - Simplified version for testing."""

import os
import asyncio
import logging
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Bot configuration
BOT_TOKEN = os.getenv("BOT_TOKEN", "your_bot_token_here")

if not BOT_TOKEN or BOT_TOKEN == "your_bot_token_here":
    print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    print("üìù –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª .env:")
    print("BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_BotFather")
    exit(1)

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# Simple in-memory storage for demo
users_data = {}

class PhotoStates(StatesGroup):
    """States for photo upload flow."""
    waiting_front = State()
    waiting_profile = State()


def get_user_data(user_id: int) -> dict:
    """Get or create user data."""
    if user_id not in users_data:
        users_data[user_id] = {
            "is_active": False,
            "analyses_left": 0,
            "messages_left": 0,
            "active_until": None
        }
    return users_data[user_id]


def is_user_active(user_data: dict) -> bool:
    """Check if user has active subscription."""
    if not user_data.get("active_until"):
        return False
    return datetime.now() < user_data["active_until"]


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """Handle /start command."""
    user_data = get_user_data(message.from_user.id)
    
    if is_user_active(user_data):
        await message.answer(
            "üî• <b>HD | Lookism</b> - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π looksmax –∫–æ—É—á!\n\n"
            "üì∏ –û—Ç–ø—Ä–∞–≤—å –¥–≤–∞ —Ñ–æ—Ç–æ (–∞–Ω—Ñ–∞—Å –∏ –ø—Ä–æ—Ñ–∏–ª—å) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
            "üí¨ –ü–æ–ª—É—á–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –∏ –ø–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏–π\n"
            "üéØ –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –Ω–∞—à–µ–º—É –ò–ò-–∫–æ—É—á—É\n\n"
            f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∞–Ω–∞–ª–∏–∑–æ–≤: <b>{user_data['analyses_left']}</b>\n"
            f"üí¨ –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{user_data['messages_left']}</b>",
            parse_mode="HTML"
        )
    else:
        # Demo activation button
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –î–ï–ú–û (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)", callback_data="demo_activate")]
        ])
        
        await message.answer(
            "üî• <b>HD | Lookism</b> - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π looksmax –∫–æ—É—á!\n\n"
            "üì∏ –ó–∞–≥—Ä—É–∂–∞–π —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å –∏ –ø—Ä–æ—Ñ–∏–ª—å\n"
            "üìä –ü–æ–ª—É—á–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫\n"
            "üéØ –£–∑–Ω–∞–≤–∞–π —Å–≤–æ–π PSL —Ä–µ–π—Ç–∏–Ω–≥\n"
            "üí™ –ü–æ–ª—É—á–∞–π –ø–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏–π\n"
            "üí¨ –û–±—â–∞–π—Å—è —Å –ò–ò-–∫–æ—É—á–µ–º\n\n"
            "üí∞ <b>–ü–æ–¥–ø–∏—Å–∫–∞: 999 ‚ÇΩ/–º–µ—Å—è—Ü</b>\n"
            "‚úÖ 3 –∞–Ω–∞–ª–∏–∑–∞ + 200 —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            "üéØ <b>–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –î–ï–ú–û –≤–µ—Ä—Å–∏—è</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )


@dp.callback_query(F.data == "demo_activate")
async def demo_activate(callback_query):
    """Activate demo version."""
    user_data = get_user_data(callback_query.from_user.id)
    
    # Activate demo for 1 day with 1 analysis
    user_data["is_active"] = True
    user_data["analyses_left"] = 1
    user_data["messages_left"] = 10
    user_data["active_until"] = datetime.now() + timedelta(days=1)
    
    await callback_query.message.edit_text(
        "üéâ <b>–î–ï–ú–û –≤–µ—Ä—Å–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
        "‚úÖ 1 –∞–Ω–∞–ª–∏–∑\n"
        "‚úÖ 10 —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚úÖ 24 —á–∞—Å–∞ –¥–æ—Å—Ç—É–ø–∞\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–≤–∞ —Ñ–æ—Ç–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞!\n"
        "1Ô∏è‚É£ –§–æ—Ç–æ –∞–Ω—Ñ–∞—Å (–ª–∏—Ü–æ–º –∫ –∫–∞–º–µ—Ä–µ)\n"
        "2Ô∏è‚É£ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å (–±–æ–∫–æ–º –∫ –∫–∞–º–µ—Ä–µ)",
        parse_mode="HTML"
    )
    
    await callback_query.answer("–î–µ–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! üéâ")


@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    """Show user statistics."""
    user_data = get_user_data(message.from_user.id)
    
    if not is_user_active(user_data):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return
    
    days_left = (user_data["active_until"] - datetime.now()).days
    
    await message.answer(
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"‚è∞ –î–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{days_left}</b>\n"
        f"üì∏ –ê–Ω–∞–ª–∏–∑–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: <b>{user_data['analyses_left']}</b>\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: <b>{user_data['messages_left']}</b>",
        parse_mode="HTML"
    )


@dp.message(Command("help"))
async def cmd_help(message: Message):
    """Show help information."""
    await message.answer(
        "üÜò <b>–ü–æ–º–æ—â—å HD | Lookism</b>\n\n"
        "üì∏ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å (–ª–∏—Ü–æ–º –∫ –∫–∞–º–µ—Ä–µ)\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å (–±–æ–∫–æ–º –∫ –∫–∞–º–µ—Ä–µ)\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n"
        "4. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ò–ò-–∫–æ—É—á—É\n\n"
        "‚öôÔ∏è <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üéØ <b>–î–µ–º–æ –≤–µ—Ä—Å–∏—è:</b> 1 –∞–Ω–∞–ª–∏–∑ + 10 —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ 24 —á–∞—Å–∞",
        parse_mode="HTML"
    )


@dp.message(F.photo)
async def handle_photo(message: Message, state: FSMContext):
    """Handle photo uploads."""
    user_data = get_user_data(message.from_user.id)
    
    if not is_user_active(user_data):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return
    
    if user_data["analyses_left"] <= 0:
        await message.answer("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–Ω–∞–ª–∏–∑—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.")
        return
    
    current_state = await state.get_state()
    
    if current_state is None:
        # First photo - front
        await state.update_data(front_file_id=message.photo[-1].file_id)
        await state.set_state(PhotoStates.waiting_profile)
        
        await message.answer(
            "‚úÖ –§–æ—Ç–æ –∞–Ω—Ñ–∞—Å –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
            "üì∏ <b>–®–∞–≥ 2/2: –ü—Ä–æ—Ñ–∏–ª—å</b>\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å (–±–æ–∫–æ–º –∫ –∫–∞–º–µ—Ä–µ)"
        )
    
    elif current_state == PhotoStates.waiting_profile:
        # Second photo - profile
        data = await state.get_data()
        front_file_id = data.get("front_file_id")
        
        if not front_file_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        # Update user quotas
        user_data["analyses_left"] -= 1
        
        await state.clear()
        
        await message.answer(
            "‚úÖ –û–±–∞ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã!\n\n"
            "‚è≥ –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω... –≠—Ç–æ –∑–∞–π–º—ë—Ç 1-2 –º–∏–Ω—É—Ç—ã\n"
            "üî¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à–∏ —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é –ò–ò\n\n"
            "‚ö†Ô∏è <b>–î–ï–ú–û –≤–µ—Ä—Å–∏—è:</b> –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π"
        )
        
        # Simulate analysis delay
        await asyncio.sleep(3)
        
        # Send demo report
        demo_report = """üéâ <b>–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤!</b>

üè∑Ô∏è –†–ï–ô–¢–ò–ù–ì –ò –ö–ê–¢–ï–ì–û–†–ò–Ø  
–ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 6.2/10 | –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–π: 6.5/10 | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: HTN

### üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ú–ï–¢–†–ò–ö  
‚Ä¢ –ö–∞–Ω—Ç–∞–ª—å–Ω—ã–π —Ç–∏–ª—Ç: +2.3¬∞ (—Ö–æ—Ä–æ—à–æ)
‚Ä¢ –ì–æ–Ω–∏–∞–ª—å–Ω—ã–π —É–≥–æ–ª: 118¬∞ (–±–ª–∏–∑–∫–æ –∫ –∏–¥–µ–∞–ª—É)
‚Ä¢ –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–∏—Ü–∞: –≤–µ—Ä—Ö 32%, —Å–µ—Ä–µ–¥–∏–Ω–∞ 35%, –Ω–∏–∑ 33%
‚Ä¢ –°–∏–º–º–µ—Ç—Ä–∏—è: 7.8/10 (—Ö–æ—Ä–æ—à–∞—è)
‚Ä¢ –ü—Ä–æ–µ–∫—Ü–∏—è –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞: –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è

### üí¨ –ß–ï–°–¢–ù–ê–Ø –û–¶–ï–ù–ö–ê  
–£ –≤–∞—Å —Ö–æ—Ä–æ—à–∏–µ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–∏—Ü–∞ –∏ –Ω–µ–ø–ª–æ—Ö–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è. –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è - —ç—Ç–æ —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –∫–∞–Ω—Ç–∞–ª—å–Ω—ã–º —Ç–∏–ª—Ç–æ–º –∏ –æ–±—â–∏–º —Ç–æ–Ω—É—Å–æ–º –ª–∏—Ü–∞.

### üìå –î–ï–¢–ê–õ–¨–ù–´–ô –ü–õ–ê–ù –£–õ–£–ß–®–ï–ù–ò–ô  
**–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ (0-3 –º–µ—Å—è—Ü–∞):**
- –ú—å—é–∏–Ω–≥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–µ–ª—é—Å—Ç–Ω–æ–π –ª–∏–Ω–∏–∏
- –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –≥–ª–∞–∑
- –£—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π

**–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–µ (3-12 –º–µ—Å—è—Ü–µ–≤):**
- –ñ–µ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
- –ú–∞—Å—Å–∞–∂ –ª–∏—Ü–∞
- –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Å–∞–Ω–∫–∞

**–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ (1+ –≥–æ–¥):**
- –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
- –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏

### üîç –ö–û–ù–ö–†–ï–¢–ù–´–ï –ü–†–û–î–£–ö–¢–´  
- –ñ–≤–∞—á–∫–∞ Falim –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –º–∞—Å—Å–µ—Ç–µ—Ä–æ–≤
- –ö–æ–ª–ª–∞–≥–µ–Ω –¥–ª—è —É–ø—Ä—É–≥–æ—Å—Ç–∏ –∫–æ–∂–∏
- –í–∏—Ç–∞–º–∏–Ω D3 + K2 –¥–ª—è –∫–æ—Å—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

üí¨ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã!

‚ö†Ô∏è <b>–≠—Ç–æ –¥–µ–º–æ-–æ—Ç—á—ë—Ç. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–Ω—ã API –∫–ª—é—á–∏ Face++, AILab –∏ DeepSeek.</b>"""
        
        await message.answer(demo_report, parse_mode="HTML")


@dp.message(F.text)
async def handle_text(message: Message):
    """Handle text messages (Q&A)."""
    user_data = get_user_data(message.from_user.id)
    
    if not is_user_active(user_data):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return
    
    if user_data["messages_left"] <= 0:
        await message.answer("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.")
        return
    
    # Update message count
    user_data["messages_left"] -= 1
    
    # Simple demo responses
    user_text = message.text.lower()
    
    if "–º—å—é–∏–Ω–≥" in user_text or "mewing" in user_text:
        response = """üí™ <b>–ú—å—é–∏–Ω–≥ (Mewing)</b>

üéØ <b>–ß—Ç–æ —ç—Ç–æ:</b>
–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —è–∑—ã–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–µ–ª—é—Å—Ç–Ω–æ–π –ª–∏–Ω–∏–∏ –∏ –ø—Ä–æ—Ñ–∏–ª—è –ª–∏—Ü–∞.

üìã <b>–ö–∞–∫ –¥–µ–ª–∞—Ç—å:</b>
1. –ü—Ä–∏–∂–º–∏ –≤–µ—Å—å —è–∑—ã–∫ –∫ –Ω—ë–±—É
2. –î–µ—Ä–∂–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ (24/7)
3. –î—ã—à–∏ —á–µ—Ä–µ–∑ –Ω–æ—Å
4. –ù–µ –Ω–∞–ø—Ä—è–≥–∞–π —à–µ—é

‚è∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
–ü–µ—Ä–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3-6 –º–µ—Å—è—Ü–µ–≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏.

üí° <b>–°–æ–≤–µ—Ç:</b> –ù–∞—á–∏–Ω–∞–π –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–æ–ª–∏ –≤ —á–µ–ª—é—Å—Ç–∏."""
    
    elif "–∂–≤–∞—á–∫–∞" in user_text or "–º–∞—Å—Å–µ—Ç–µ—Ä" in user_text:
        response = """ü¶∑ <b>–ñ–µ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è</b>

üéØ <b>–¶–µ–ª—å:</b>
–†–∞–∑–≤–∏—Ç–∏–µ –º–∞—Å—Å–µ—Ç–µ—Ä–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–π —á–µ–ª—é—Å—Ç–Ω–æ–π –ª–∏–Ω–∏–∏.

üìã <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ñ–≤–∞—á–∫–∞ Falim (—Å–∞–º–∞—è –∂—ë—Å—Ç–∫–∞—è)
‚Ä¢ 30-60 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å
‚Ä¢ –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –Ω–∞ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
‚Ä¢ –ü–µ—Ä–µ—Ä—ã–≤—ã –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏

‚ö†Ô∏è <b>–û—Å—Ç–æ—Ä–æ–∂–Ω–æ:</b>
–ù–µ –ø–µ—Ä–µ—É—Å–µ—Ä–¥—Å—Ç–≤—É–π - –º–æ–∂–µ—à—å –ø–æ–≤—Ä–µ–¥–∏—Ç—å —á–µ–ª—é—Å—Ç–Ω–æ–π —Å—É—Å—Ç–∞–≤."""
    
    elif "–∫–æ–∂–∞" in user_text or "—É—Ö–æ–¥" in user_text:
        response = """‚ú® <b>–£—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π –ª–∏—Ü–∞</b>

üß¥ <b>–ë–∞–∑–æ–≤—ã–π —É—Ö–æ–¥:</b>
1. –û—á–∏—â–µ–Ω–∏–µ (—É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º)
2. –¢–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
3. –£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ
4. SPF –∑–∞—â–∏—Ç–∞ (–¥–Ω—ë–º)

üî¨ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</b>
‚Ä¢ –†–µ—Ç–∏–Ω–æ–ª (–≤–µ—á–µ—Ä–æ–º)
‚Ä¢ –í–∏—Ç–∞–º–∏–Ω C (—É—Ç—Ä–æ–º)
‚Ä¢ –ù–∏–∞—Ü–∏–Ω–∞–º–∏–¥ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)
‚Ä¢ –ì–∏–∞–ª—É—Ä–æ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞

üí° <b>–°–æ–≤–µ—Ç:</b>
–í–≤–æ–¥–∏ –Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ."""
    
    else:
        response = f"""üí¨ <b>–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!</b>

–í–∞—à –≤–æ–ø—Ä–æ—Å: "{message.text}"

‚ö†Ô∏è <b>–î–µ–º–æ —Ä–µ–∂–∏–º:</b> –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –ò–ò-–∫–æ—É—á–∞ –Ω—É–∂–µ–Ω API –∫–ª—é—á DeepSeek.

üéØ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã:</b>
‚Ä¢ –ú—å—é–∏–Ω–≥ –∏ —Ç–µ—Ö–Ω–∏–∫–∏
‚Ä¢ –ñ–µ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
‚Ä¢ –£—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π
‚Ä¢ –î–æ–±–∞–≤–∫–∏ –∏ –ø–∏—Ç–∞–Ω–∏–µ

üí¨ –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{user_data['messages_left']}</b>"""
    
    await message.answer(response, parse_mode="HTML")


async def main():
    """Main entry point."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ HD | Lookism –±–æ—Ç–∞ (–¥–µ–º–æ –≤–µ—Ä—Å–∏—è)...")
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
